# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Account`.
# Please instead update this file by running `bin/tapioca dsl Account`.


class Account
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include GeneratedDelegatedTypeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def active?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def disable(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def disable!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def disable_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def disabled?; end

  sig { returns(T::Boolean) }
  def draft?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def enable(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def enable!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def enable_without_validation!(*opts); end

  sig { returns(ActiveStorage::Attached::One) }
  def logo; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def logo=(attachable); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_for_deletion(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_for_deletion!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_for_deletion_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def may_activate?; end

  sig { returns(T::Boolean) }
  def may_disable?; end

  sig { returns(T::Boolean) }
  def may_enable?; end

  sig { returns(T::Boolean) }
  def may_mark_for_deletion?; end

  sig { returns(T::Boolean) }
  def pending_deletion?; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(args: T.untyped, block: T.nilable(T.proc.bind(PrivateAASMMachine).void)).returns(PrivateAASMMachine) }
    def aasm(*args, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def classifications; end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Account).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Account).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Account]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Account)) }
    def fifth; end

    sig { returns(::Account) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Account)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Account])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Account).void).returns(T.nilable(::Account)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Account)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Account) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Account).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Account])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Account]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Account]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Account)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Account) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Account) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Account)) }
    sig { params(limit: Integer).returns(T::Array[::Account]) }
    def first(limit = nil); end

    sig { returns(::Account) }
    def first!; end

    sig { returns(T.nilable(::Account)) }
    def forty_two; end

    sig { returns(::Account) }
    def forty_two!; end

    sig { returns(T.nilable(::Account)) }
    def fourth; end

    sig { returns(::Account) }
    def fourth!; end

    sig { returns(T::Array[T.untyped]) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Account)) }
    sig { params(limit: Integer).returns(T::Array[::Account]) }
    def last(limit = nil); end

    sig { returns(::Account) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Account).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Account).void)
      ).returns(T::Array[::Account])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Account).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Account).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Account)) }
    def second; end

    sig { returns(::Account) }
    def second!; end

    sig { returns(T.nilable(::Account)) }
    def second_to_last; end

    sig { returns(::Account) }
    def second_to_last!; end

    sig { returns(::Account) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Account).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Account)) }
    sig { params(limit: Integer).returns(T::Array[::Account]) }
    def take(limit = nil); end

    sig { returns(::Account) }
    def take!; end

    sig { returns(T.nilable(::Account)) }
    def third; end

    sig { returns(::Account) }
    def third!; end

    sig { returns(T.nilable(::Account)) }
    def third_to_last; end

    sig { returns(::Account) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def asset!; end

    sig { returns(T::Boolean) }
    def asset?; end

    sig { void }
    def liability!; end

    sig { returns(T::Boolean) }
    def liability?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.untyped) }
    def accountable; end

    sig { params(value: T.untyped).void }
    def accountable=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def accountable_attributes=(attributes); end

    sig { returns(T::Boolean) }
    def accountable_changed?; end

    sig { returns(T::Boolean) }
    def accountable_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def balance_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def balance_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :balances`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Balance::PrivateCollectionProxy) }
    def balances; end

    sig { params(value: T::Enumerable[::Balance]).void }
    def balances=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Family) }
    def build_family(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def build_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_logo_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_logo_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Family) }
    def create_family(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Family) }
    def create_family!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def create_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def create_import!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_logo_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_logo_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_logo_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_logo_blob!(*args, &blk); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Entry::PrivateCollectionProxy) }
    def entries; end

    sig { params(value: T::Enumerable[::Entry]).void }
    def entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def entry_ids=(ids); end

    sig { returns(T.nilable(::Family)) }
    def family; end

    sig { params(value: T.nilable(::Family)).void }
    def family=(value); end

    sig { returns(T::Boolean) }
    def family_changed?; end

    sig { returns(T::Boolean) }
    def family_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def holding_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def holding_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :holdings`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Holding::PrivateCollectionProxy) }
    def holdings; end

    sig { params(value: T::Enumerable[::Holding]).void }
    def holdings=(value); end

    sig { returns(T.nilable(::Import)) }
    def import; end

    sig { params(value: T.nilable(::Import)).void }
    def import=(value); end

    sig { returns(T::Boolean) }
    def import_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def import_mapping_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def import_mapping_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :import_mappings`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Import::Mapping::PrivateCollectionProxy) }
    def import_mappings; end

    sig { params(value: T::Enumerable[::Import::Mapping]).void }
    def import_mappings=(value); end

    sig { returns(T::Boolean) }
    def import_previously_changed?; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def logo_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def logo_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def logo_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def logo_blob=(value); end

    sig { returns(T.untyped) }
    def reload_accountable; end

    sig { returns(T.nilable(::Family)) }
    def reload_family; end

    sig { returns(T.nilable(::Import)) }
    def reload_import; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_logo_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_logo_blob; end

    sig { void }
    def reset_accountable; end

    sig { void }
    def reset_family; end

    sig { void }
    def reset_import; end

    sig { void }
    def reset_logo_attachment; end

    sig { void }
    def reset_logo_blob; end

    sig { returns(T::Array[T.untyped]) }
    def sync_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sync_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :syncs`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sync::PrivateCollectionProxy) }
    def syncs; end

    sig { params(value: T::Enumerable[::Sync]).void }
    def syncs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def trade_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def trade_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :trades, through: :entries`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def trades; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def trades=(value); end

    sig { returns(T::Array[T.untyped]) }
    def transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :transactions, through: :entries`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def transactions; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def transactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def valuation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def valuation_ids=(ids); end

    # This method is created by ActiveRecord on the `Account` class because it declared `has_many :valuations, through: :entries`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def valuations; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def valuations=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def alphabetically(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def asset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def assets(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def credit_cards(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cryptos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def depositories(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def disabled(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def enrichable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def investments(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def liabilities(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def liability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def loans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def manual(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_asset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_liability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def other_assets(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def other_liabilities(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending_deletion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def properties(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Account).returns(BasicObject)).returns(T::Array[::Account]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def vehicles(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_logo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def accountable_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def accountable_id=(value); end

    sig { returns(T::Boolean) }
    def accountable_id?; end

    sig { returns(T.nilable(::String)) }
    def accountable_id_before_last_save; end

    sig { returns(T.untyped) }
    def accountable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def accountable_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def accountable_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def accountable_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def accountable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def accountable_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def accountable_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def accountable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def accountable_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def accountable_id_was; end

    sig { void }
    def accountable_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def accountable_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def accountable_type=(value); end

    sig { returns(T::Boolean) }
    def accountable_type?; end

    sig { returns(T.nilable(::String)) }
    def accountable_type_before_last_save; end

    sig { returns(T.untyped) }
    def accountable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def accountable_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def accountable_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def accountable_type_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def accountable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def accountable_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def accountable_type_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def accountable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def accountable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def accountable_type_was; end

    sig { void }
    def accountable_type_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def balance; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def balance=(value); end

    sig { returns(T::Boolean) }
    def balance?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def balance_before_last_save; end

    sig { returns(T.untyped) }
    def balance_before_type_cast; end

    sig { returns(T::Boolean) }
    def balance_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def balance_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def balance_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def balance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def balance_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def balance_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def balance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def balance_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def balance_was; end

    sig { void }
    def balance_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def cash_balance; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def cash_balance=(value); end

    sig { returns(T::Boolean) }
    def cash_balance?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def cash_balance_before_last_save; end

    sig { returns(T.untyped) }
    def cash_balance_before_type_cast; end

    sig { returns(T::Boolean) }
    def cash_balance_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def cash_balance_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def cash_balance_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cash_balance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def cash_balance_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def cash_balance_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cash_balance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def cash_balance_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def cash_balance_was; end

    sig { void }
    def cash_balance_will_change!; end

    sig { returns(T.nilable(::String)) }
    def classification; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def classification=(value); end

    sig { returns(T::Boolean) }
    def classification?; end

    sig { returns(T.nilable(::String)) }
    def classification_before_last_save; end

    sig { returns(T.untyped) }
    def classification_before_type_cast; end

    sig { returns(T::Boolean) }
    def classification_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def classification_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def classification_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def classification_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def classification_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def classification_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def classification_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def classification_previously_was; end

    sig { returns(T.nilable(::String)) }
    def classification_was; end

    sig { void }
    def classification_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def currency=(value); end

    sig { returns(T::Boolean) }
    def currency?; end

    sig { returns(T.nilable(::String)) }
    def currency_before_last_save; end

    sig { returns(T.untyped) }
    def currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_was; end

    sig { void }
    def currency_will_change!; end

    sig { returns(::String) }
    def family_id; end

    sig { params(value: ::String).returns(::String) }
    def family_id=(value); end

    sig { returns(T::Boolean) }
    def family_id?; end

    sig { returns(T.nilable(::String)) }
    def family_id_before_last_save; end

    sig { returns(T.untyped) }
    def family_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def family_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def family_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def family_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def family_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def family_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def family_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def family_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def family_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def family_id_was; end

    sig { void }
    def family_id_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def import_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def import_id=(value); end

    sig { returns(T::Boolean) }
    def import_id?; end

    sig { returns(T.nilable(::String)) }
    def import_id_before_last_save; end

    sig { returns(T.untyped) }
    def import_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def import_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def import_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def import_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def import_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def import_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def import_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def import_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def import_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def import_id_was; end

    sig { void }
    def import_id_will_change!; end

    sig { returns(T::Boolean) }
    def is_active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_active=(value); end

    sig { returns(T::Boolean) }
    def is_active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_active_before_last_save; end

    sig { returns(T.untyped) }
    def is_active_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_active_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def is_active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_active_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def is_active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_active_was; end

    sig { void }
    def is_active_will_change!; end

    sig { returns(T.untyped) }
    def locked_attributes; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def locked_attributes=(value); end

    sig { returns(T::Boolean) }
    def locked_attributes?; end

    sig { returns(T.untyped) }
    def locked_attributes_before_last_save; end

    sig { returns(T.untyped) }
    def locked_attributes_before_type_cast; end

    sig { returns(T::Boolean) }
    def locked_attributes_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def locked_attributes_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def locked_attributes_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def locked_attributes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def locked_attributes_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def locked_attributes_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def locked_attributes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def locked_attributes_previously_was; end

    sig { returns(T.untyped) }
    def locked_attributes_was; end

    sig { void }
    def locked_attributes_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def plaid_account_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def plaid_account_id=(value); end

    sig { returns(T::Boolean) }
    def plaid_account_id?; end

    sig { returns(T.nilable(::String)) }
    def plaid_account_id_before_last_save; end

    sig { returns(T.untyped) }
    def plaid_account_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def plaid_account_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plaid_account_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plaid_account_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def plaid_account_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plaid_account_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plaid_account_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def plaid_account_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plaid_account_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plaid_account_id_was; end

    sig { void }
    def plaid_account_id_will_change!; end

    sig { void }
    def restore_accountable_id!; end

    sig { void }
    def restore_accountable_type!; end

    sig { void }
    def restore_balance!; end

    sig { void }
    def restore_cash_balance!; end

    sig { void }
    def restore_classification!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_currency!; end

    sig { void }
    def restore_family_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_import_id!; end

    sig { void }
    def restore_is_active!; end

    sig { void }
    def restore_locked_attributes!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_plaid_account_id!; end

    sig { void }
    def restore_scheduled_for_deletion!; end

    sig { void }
    def restore_subtype!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_accountable_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_accountable_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_accountable_type; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_accountable_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_balance; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_balance?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_cash_balance; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_cash_balance?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_classification; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_classification?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_currency; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_currency?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_family_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_family_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_import_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_import_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_active; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_is_active?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_locked_attributes; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_locked_attributes?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_name?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_plaid_account_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_plaid_account_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_scheduled_for_deletion; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_scheduled_for_deletion?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_subtype; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_subtype?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def scheduled_for_deletion; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def scheduled_for_deletion=(value); end

    sig { returns(T::Boolean) }
    def scheduled_for_deletion?; end

    sig { returns(T.nilable(T::Boolean)) }
    def scheduled_for_deletion_before_last_save; end

    sig { returns(T.untyped) }
    def scheduled_for_deletion_before_type_cast; end

    sig { returns(T::Boolean) }
    def scheduled_for_deletion_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def scheduled_for_deletion_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def scheduled_for_deletion_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def scheduled_for_deletion_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def scheduled_for_deletion_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def scheduled_for_deletion_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def scheduled_for_deletion_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def scheduled_for_deletion_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def scheduled_for_deletion_was; end

    sig { void }
    def scheduled_for_deletion_will_change!; end

    sig { returns(T.nilable(::String)) }
    def subtype; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def subtype=(value); end

    sig { returns(T::Boolean) }
    def subtype?; end

    sig { returns(T.nilable(::String)) }
    def subtype_before_last_save; end

    sig { returns(T.untyped) }
    def subtype_before_type_cast; end

    sig { returns(T::Boolean) }
    def subtype_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subtype_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subtype_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def subtype_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subtype_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subtype_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def subtype_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subtype_previously_was; end

    sig { returns(T.nilable(::String)) }
    def subtype_was; end

    sig { void }
    def subtype_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_accountable_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_accountable_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_balance?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_cash_balance?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_classification?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_currency?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_family_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_import_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_is_active?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_locked_attributes?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_name?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_plaid_account_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_scheduled_for_deletion?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_subtype?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end
  end

  module GeneratedDelegatedTypeMethods
    sig { returns(T::Class[T.anything]) }
    def accountable_class; end

    sig { returns(ActiveSupport::StringInquirer) }
    def accountable_name; end

    sig do
      params(
        args: T.untyped
      ).returns(T.any(Depository, Investment, Crypto, Property, Vehicle, OtherAsset, CreditCard, Loan, OtherLiability))
    end
    def build_accountable(*args); end

    sig { returns(T.nilable(CreditCard)) }
    def credit_card; end

    sig { returns(T::Boolean) }
    def credit_card?; end

    sig { returns(T.nilable(::String)) }
    def credit_card_id; end

    sig { returns(T.nilable(Crypto)) }
    def crypto; end

    sig { returns(T::Boolean) }
    def crypto?; end

    sig { returns(T.nilable(::String)) }
    def crypto_id; end

    sig { returns(T.nilable(Depository)) }
    def depository; end

    sig { returns(T::Boolean) }
    def depository?; end

    sig { returns(T.nilable(::String)) }
    def depository_id; end

    sig { returns(T.nilable(Investment)) }
    def investment; end

    sig { returns(T::Boolean) }
    def investment?; end

    sig { returns(T.nilable(::String)) }
    def investment_id; end

    sig { returns(T.nilable(Loan)) }
    def loan; end

    sig { returns(T::Boolean) }
    def loan?; end

    sig { returns(T.nilable(::String)) }
    def loan_id; end

    sig { returns(T.nilable(OtherAsset)) }
    def other_asset; end

    sig { returns(T::Boolean) }
    def other_asset?; end

    sig { returns(T.nilable(::String)) }
    def other_asset_id; end

    sig { returns(T.nilable(OtherLiability)) }
    def other_liability; end

    sig { returns(T::Boolean) }
    def other_liability?; end

    sig { returns(T.nilable(::String)) }
    def other_liability_id; end

    sig { returns(T.nilable(Property)) }
    def property; end

    sig { returns(T::Boolean) }
    def property?; end

    sig { returns(T.nilable(::String)) }
    def property_id; end

    sig { returns(T.nilable(Vehicle)) }
    def vehicle; end

    sig { returns(T::Boolean) }
    def vehicle?; end

    sig { returns(T.nilable(::String)) }
    def vehicle_id; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def alphabetically(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def asset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def assets(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def credit_cards(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cryptos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def depositories(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def disabled(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def enrichable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def investments(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def liabilities(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def liability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def loans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def manual(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_asset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_liability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def other_assets(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def other_liabilities(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending_deletion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def properties(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Account).returns(BasicObject)).returns(T::Array[::Account]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def vehicles(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_logo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAASMMachine < AASM::Base
    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def after_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def after_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def after_all_transitions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def before_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def before_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def ensure_on_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Account).void)
      ).returns(T.untyped)
    end
    def error_on_all_events(*callbacks, &block); end

    sig { params(name: T.untyped, options: T.untyped, block: T.proc.bind(PrivateAASMEvent).void).returns(T.untyped) }
    def event(name, options = nil, &block); end

    class PrivateAASMEvent < AASM::Core::Event
      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_commit(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_success(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def ensure(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def error(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def success(symbol = nil, &block); end

      sig do
        params(
          definitions: T.untyped,
          block: T.nilable(T.proc.bind(PrivateAASMTransition).void)
        ).returns(T.untyped)
      end
      def transitions(definitions = nil, &block); end
    end

    class PrivateAASMTransition < AASM::Core::Transition
      sig { params(block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)).returns(T.untyped) }
      def after(&block); end

      sig { params(block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)).returns(T::Boolean) }
      def guard(&block); end

      sig { params(block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)).returns(T.untyped) }
      def on_transition(&block); end

      sig { params(block: T.nilable(T.proc.bind(Account).params(opts: T.untyped).void)).returns(T.untyped) }
      def success(&block); end
    end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Account } }

    sig { returns(T::Array[::Account]) }
    def to_a; end

    sig { returns(T::Array[::Account]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Account } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Account } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Account } }

    sig do
      params(
        records: T.any(::Account, T::Enumerable[T.any(::Account, T::Enumerable[::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Account, T::Enumerable[T.any(::Account, T::Enumerable[::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Account, T::Enumerable[T.any(::Account, T::Enumerable[::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Account]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Account, T::Enumerable[T.any(::Account, T::Enumerable[::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Account, T::Enumerable[T.any(::Account, T::Enumerable[::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Account, T::Enumerable[T.any(::Account, T::Enumerable[::Account])])
      ).returns(T::Array[::Account])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Account]) }
    def target; end

    sig { returns(T::Array[::Account]) }
    def to_a; end

    sig { returns(T::Array[::Account]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Account } }

    sig { returns(T::Array[::Account]) }
    def to_a; end

    sig { returns(T::Array[::Account]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Account } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Account } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end

  STATE_ACTIVE = T.let(T.unsafe(nil), Symbol)
  STATE_DISABLED = T.let(T.unsafe(nil), Symbol)
  STATE_DRAFT = T.let(T.unsafe(nil), Symbol)
  STATE_PENDING_DELETION = T.let(T.unsafe(nil), Symbol)
end
