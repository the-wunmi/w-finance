# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Sync`.
# Please instead update this file by running `bin/tapioca dsl Sync`.


class Sync
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { params(opts: T.untyped).returns(T.untyped) }
  def complete(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def complete!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def complete_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def completed?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def fail(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def fail!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def fail_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def failed?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_stale(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_stale!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_stale_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def may_complete?; end

  sig { returns(T::Boolean) }
  def may_fail?; end

  sig { returns(T::Boolean) }
  def may_mark_stale?; end

  sig { returns(T::Boolean) }
  def may_start?; end

  sig { returns(T::Boolean) }
  def pending?; end

  sig { returns(T::Boolean) }
  def stale?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def start(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def start!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def start_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def syncing?; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(args: T.untyped, block: T.nilable(T.proc.bind(PrivateAASMMachine).void)).returns(PrivateAASMMachine) }
    def aasm(*args, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Sync).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Sync).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Sync]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Sync)) }
    def fifth; end

    sig { returns(::Sync) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Sync)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Sync])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Sync).void).returns(T.nilable(::Sync)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Sync)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Sync) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Sync).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Sync])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Sync]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Sync]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Sync)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Sync) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Sync) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Sync)) }
    sig { params(limit: Integer).returns(T::Array[::Sync]) }
    def first(limit = nil); end

    sig { returns(::Sync) }
    def first!; end

    sig { returns(T.nilable(::Sync)) }
    def forty_two; end

    sig { returns(::Sync) }
    def forty_two!; end

    sig { returns(T.nilable(::Sync)) }
    def fourth; end

    sig { returns(::Sync) }
    def fourth!; end

    sig { returns(T::Array[T.untyped]) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Sync)) }
    sig { params(limit: Integer).returns(T::Array[::Sync]) }
    def last(limit = nil); end

    sig { returns(::Sync) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Sync).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Sync).void)
      ).returns(T::Array[::Sync])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Sync).void)).returns(::Sync) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Sync).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Sync).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Sync)) }
    def second; end

    sig { returns(::Sync) }
    def second!; end

    sig { returns(T.nilable(::Sync)) }
    def second_to_last; end

    sig { returns(::Sync) }
    def second_to_last!; end

    sig { returns(::Sync) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Sync).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Sync)) }
    sig { params(limit: Integer).returns(T::Array[::Sync]) }
    def take(limit = nil); end

    sig { returns(::Sync) }
    def take!; end

    sig { returns(T.nilable(::Sync)) }
    def third; end

    sig { returns(::Sync) }
    def third!; end

    sig { returns(T.nilable(::Sync)) }
    def third_to_last; end

    sig { returns(::Sync) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Sync) }
    def build_parent(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def child_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_ids=(ids); end

    # This method is created by ActiveRecord on the `Sync` class because it declared `has_many :children`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sync::PrivateCollectionProxy) }
    def children; end

    sig { params(value: T::Enumerable[::Sync]).void }
    def children=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sync) }
    def create_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sync) }
    def create_parent!(*args, &blk); end

    sig { returns(T.nilable(::Sync)) }
    def parent; end

    sig { params(value: T.nilable(::Sync)).void }
    def parent=(value); end

    sig { returns(T::Boolean) }
    def parent_changed?; end

    sig { returns(T::Boolean) }
    def parent_previously_changed?; end

    sig { returns(T.nilable(::Sync)) }
    def reload_parent; end

    sig { returns(T.untyped) }
    def reload_syncable; end

    sig { void }
    def reset_parent; end

    sig { void }
    def reset_syncable; end

    sig { returns(T.untyped) }
    def syncable; end

    sig { params(value: T.untyped).void }
    def syncable=(value); end

    sig { returns(T::Boolean) }
    def syncable_changed?; end

    sig { returns(T::Boolean) }
    def syncable_previously_changed?; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def incomplete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Sync).returns(BasicObject)).returns(T::Array[::Sync]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def stale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def syncing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def completed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def completed_at=(value); end

    sig { returns(T::Boolean) }
    def completed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def completed_at_before_last_save; end

    sig { returns(T.untyped) }
    def completed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def completed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def completed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def completed_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def completed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def completed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def completed_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def completed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def completed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def completed_at_was; end

    sig { void }
    def completed_at_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.untyped) }
    def data; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def data=(value); end

    sig { returns(T::Boolean) }
    def data?; end

    sig { returns(T.untyped) }
    def data_before_last_save; end

    sig { returns(T.untyped) }
    def data_before_type_cast; end

    sig { returns(T::Boolean) }
    def data_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def data_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def data_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def data_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def data_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def data_previously_was; end

    sig { returns(T.untyped) }
    def data_was; end

    sig { void }
    def data_will_change!; end

    sig { returns(T.nilable(::String)) }
    def error; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def error=(value); end

    sig { returns(T::Boolean) }
    def error?; end

    sig { returns(T.nilable(::String)) }
    def error_before_last_save; end

    sig { returns(T.untyped) }
    def error_before_type_cast; end

    sig { returns(T::Boolean) }
    def error_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def error_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def error_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def error_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def error_previously_was; end

    sig { returns(T.nilable(::String)) }
    def error_was; end

    sig { void }
    def error_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def failed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def failed_at=(value); end

    sig { returns(T::Boolean) }
    def failed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def failed_at_before_last_save; end

    sig { returns(T.untyped) }
    def failed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def failed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def failed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def failed_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def failed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def failed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def failed_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def failed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def failed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def failed_at_was; end

    sig { void }
    def failed_at_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def parent_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def parent_id=(value); end

    sig { returns(T::Boolean) }
    def parent_id?; end

    sig { returns(T.nilable(::String)) }
    def parent_id_before_last_save; end

    sig { returns(T.untyped) }
    def parent_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def parent_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def parent_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def parent_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def parent_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def parent_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def parent_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def parent_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def parent_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def parent_id_was; end

    sig { void }
    def parent_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pending_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pending_at=(value); end

    sig { returns(T::Boolean) }
    def pending_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pending_at_before_last_save; end

    sig { returns(T.untyped) }
    def pending_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def pending_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pending_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pending_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def pending_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pending_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pending_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def pending_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pending_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pending_at_was; end

    sig { void }
    def pending_at_will_change!; end

    sig { void }
    def restore_completed_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_data!; end

    sig { void }
    def restore_error!; end

    sig { void }
    def restore_failed_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_parent_id!; end

    sig { void }
    def restore_pending_at!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_syncable_id!; end

    sig { void }
    def restore_syncable_type!; end

    sig { void }
    def restore_syncing_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_window_end_date!; end

    sig { void }
    def restore_window_start_date!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_completed_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_completed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_data; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_data?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_error; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_error?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_failed_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_failed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_parent_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_parent_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_pending_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_pending_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_status?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_syncable_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_syncable_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_syncable_type; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_syncable_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_syncing_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_syncing_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_window_end_date; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_window_end_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_window_start_date; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_window_start_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(::String) }
    def syncable_id; end

    sig { params(value: ::String).returns(::String) }
    def syncable_id=(value); end

    sig { returns(T::Boolean) }
    def syncable_id?; end

    sig { returns(T.nilable(::String)) }
    def syncable_id_before_last_save; end

    sig { returns(T.untyped) }
    def syncable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def syncable_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def syncable_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def syncable_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def syncable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def syncable_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def syncable_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def syncable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def syncable_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def syncable_id_was; end

    sig { void }
    def syncable_id_will_change!; end

    sig { returns(::String) }
    def syncable_type; end

    sig { params(value: ::String).returns(::String) }
    def syncable_type=(value); end

    sig { returns(T::Boolean) }
    def syncable_type?; end

    sig { returns(T.nilable(::String)) }
    def syncable_type_before_last_save; end

    sig { returns(T.untyped) }
    def syncable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def syncable_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def syncable_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def syncable_type_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def syncable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def syncable_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def syncable_type_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def syncable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def syncable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def syncable_type_was; end

    sig { void }
    def syncable_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def syncing_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def syncing_at=(value); end

    sig { returns(T::Boolean) }
    def syncing_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def syncing_at_before_last_save; end

    sig { returns(T.untyped) }
    def syncing_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def syncing_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def syncing_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def syncing_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def syncing_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def syncing_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def syncing_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def syncing_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def syncing_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def syncing_at_was; end

    sig { void }
    def syncing_at_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_completed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_data?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_error?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_failed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_parent_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_pending_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_status?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_syncable_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_syncable_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_syncing_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_window_end_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_window_start_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def window_end_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def window_end_date=(value); end

    sig { returns(T::Boolean) }
    def window_end_date?; end

    sig { returns(T.nilable(::Date)) }
    def window_end_date_before_last_save; end

    sig { returns(T.untyped) }
    def window_end_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def window_end_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def window_end_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def window_end_date_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def window_end_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def window_end_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def window_end_date_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def window_end_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def window_end_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def window_end_date_was; end

    sig { void }
    def window_end_date_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def window_start_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def window_start_date=(value); end

    sig { returns(T::Boolean) }
    def window_start_date?; end

    sig { returns(T.nilable(::Date)) }
    def window_start_date_before_last_save; end

    sig { returns(T.untyped) }
    def window_start_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def window_start_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def window_start_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def window_start_date_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def window_start_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def window_start_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def window_start_date_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def window_start_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def window_start_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def window_start_date_was; end

    sig { void }
    def window_start_date_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def incomplete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Sync).returns(BasicObject)).returns(T::Array[::Sync]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def stale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def syncing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAASMMachine < AASM::Base
    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def after_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def after_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def after_all_transitions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def before_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def before_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def ensure_on_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Sync).void)
      ).returns(T.untyped)
    end
    def error_on_all_events(*callbacks, &block); end

    sig { params(name: T.untyped, options: T.untyped, block: T.proc.bind(PrivateAASMEvent).void).returns(T.untyped) }
    def event(name, options = nil, &block); end

    class PrivateAASMEvent < AASM::Core::Event
      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_commit(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_success(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def ensure(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def error(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def success(symbol = nil, &block); end

      sig do
        params(
          definitions: T.untyped,
          block: T.nilable(T.proc.bind(PrivateAASMTransition).void)
        ).returns(T.untyped)
      end
      def transitions(definitions = nil, &block); end
    end

    class PrivateAASMTransition < AASM::Core::Transition
      sig { params(block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)).returns(T.untyped) }
      def after(&block); end

      sig { params(block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)).returns(T::Boolean) }
      def guard(&block); end

      sig { params(block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)).returns(T.untyped) }
      def on_transition(&block); end

      sig { params(block: T.nilable(T.proc.bind(Sync).params(opts: T.untyped).void)).returns(T.untyped) }
      def success(&block); end
    end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Sync } }

    sig { returns(T::Array[::Sync]) }
    def to_a; end

    sig { returns(T::Array[::Sync]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Sync } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Sync } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Sync } }

    sig do
      params(
        records: T.any(::Sync, T::Enumerable[T.any(::Sync, T::Enumerable[::Sync])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Sync, T::Enumerable[T.any(::Sync, T::Enumerable[::Sync])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Sync, T::Enumerable[T.any(::Sync, T::Enumerable[::Sync])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Sync]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Sync, T::Enumerable[T.any(::Sync, T::Enumerable[::Sync])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Sync, T::Enumerable[T.any(::Sync, T::Enumerable[::Sync])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Sync, T::Enumerable[T.any(::Sync, T::Enumerable[::Sync])])
      ).returns(T::Array[::Sync])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Sync]) }
    def target; end

    sig { returns(T::Array[::Sync]) }
    def to_a; end

    sig { returns(T::Array[::Sync]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Sync } }

    sig { returns(T::Array[::Sync]) }
    def to_a; end

    sig { returns(T::Array[::Sync]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Sync } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Sync } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end

  STATE_COMPLETED = T.let(T.unsafe(nil), Symbol)
  STATE_FAILED = T.let(T.unsafe(nil), Symbol)
  STATE_PENDING = T.let(T.unsafe(nil), Symbol)
  STATE_STALE = T.let(T.unsafe(nil), Symbol)
  STATE_SYNCING = T.let(T.unsafe(nil), Symbol)
end
