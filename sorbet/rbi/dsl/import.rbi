# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Import`.
# Please instead update this file by running `bin/tapioca dsl Import`.


class Import
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Import).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Import).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Import]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Import)) }
    def fifth; end

    sig { returns(::Import) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Import)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Import])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Import).void).returns(T.nilable(::Import)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Import)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Import) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Import).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Import])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Import]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Import]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Import)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Import) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Import) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Import)) }
    sig { params(limit: Integer).returns(T::Array[::Import]) }
    def first(limit = nil); end

    sig { returns(::Import) }
    def first!; end

    sig { returns(T.nilable(::Import)) }
    def forty_two; end

    sig { returns(::Import) }
    def forty_two!; end

    sig { returns(T.nilable(::Import)) }
    def fourth; end

    sig { returns(::Import) }
    def fourth!; end

    sig { returns(T::Array[T.untyped]) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Import)) }
    sig { params(limit: Integer).returns(T::Array[::Import]) }
    def last(limit = nil); end

    sig { returns(::Import) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Import).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Import).void)
      ).returns(T::Array[::Import])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Import).void)).returns(::Import) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Import).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Import).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Import)) }
    def second; end

    sig { returns(::Import) }
    def second!; end

    sig { returns(T.nilable(::Import)) }
    def second_to_last; end

    sig { returns(::Import) }
    def second_to_last!; end

    sig { returns(::Import) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Import).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Import)) }
    sig { params(limit: Integer).returns(T::Array[::Import]) }
    def take(limit = nil); end

    sig { returns(::Import) }
    def take!; end

    sig { returns(T.nilable(::Import)) }
    def third; end

    sig { returns(::Import) }
    def third!; end

    sig { returns(T.nilable(::Import)) }
    def third_to_last; end

    sig { returns(::Import) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def complete!; end

    sig { returns(T::Boolean) }
    def complete?; end

    sig { void }
    def failed!; end

    sig { returns(T::Boolean) }
    def failed?; end

    sig { void }
    def importing!; end

    sig { returns(T::Boolean) }
    def importing?; end

    sig { void }
    def pending!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def revert_failed!; end

    sig { returns(T::Boolean) }
    def revert_failed?; end

    sig { void }
    def reverting!; end

    sig { returns(T::Boolean) }
    def reverting?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Account)) }
    def account; end

    sig { params(value: T.nilable(::Account)).void }
    def account=(value); end

    sig { returns(T::Boolean) }
    def account_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def account_ids=(ids); end

    sig { returns(T::Boolean) }
    def account_previously_changed?; end

    # This method is created by ActiveRecord on the `Import` class because it declared `has_many :accounts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Account::PrivateCollectionProxy) }
    def accounts; end

    sig { params(value: T::Enumerable[::Account]).void }
    def accounts=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Account) }
    def build_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Family) }
    def build_family(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Account) }
    def create_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Account) }
    def create_account!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Family) }
    def create_family(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Family) }
    def create_family!(*args, &blk); end

    # This method is created by ActiveRecord on the `Import` class because it declared `has_many :entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Entry::PrivateCollectionProxy) }
    def entries; end

    sig { params(value: T::Enumerable[::Entry]).void }
    def entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def entry_ids=(ids); end

    sig { returns(T.nilable(::Family)) }
    def family; end

    sig { params(value: T.nilable(::Family)).void }
    def family=(value); end

    sig { returns(T::Boolean) }
    def family_changed?; end

    sig { returns(T::Boolean) }
    def family_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def mapping_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mapping_ids=(ids); end

    # This method is created by ActiveRecord on the `Import` class because it declared `has_many :mappings`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Import::Mapping::PrivateCollectionProxy) }
    def mappings; end

    sig { params(value: T::Enumerable[::Import::Mapping]).void }
    def mappings=(value); end

    sig { returns(T.nilable(::Account)) }
    def reload_account; end

    sig { returns(T.nilable(::Family)) }
    def reload_family; end

    sig { void }
    def reset_account; end

    sig { void }
    def reset_family; end

    sig { returns(T::Array[T.untyped]) }
    def row_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def row_ids=(ids); end

    # This method is created by ActiveRecord on the `Import` class because it declared `has_many :rows`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Import::Row::PrivateCollectionProxy) }
    def rows; end

    sig { params(value: T::Enumerable[::Import::Row]).void }
    def rows=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def importing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_importing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_revert_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_reverting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def revert_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Import).returns(BasicObject)).returns(T::Array[::Import]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def account_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def account_col_label=(value); end

    sig { returns(T::Boolean) }
    def account_col_label?; end

    sig { returns(T.nilable(::String)) }
    def account_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def account_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def account_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def account_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def account_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def account_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def account_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def account_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def account_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def account_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def account_col_label_was; end

    sig { void }
    def account_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def account_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def account_id=(value); end

    sig { returns(T::Boolean) }
    def account_id?; end

    sig { returns(T.nilable(::String)) }
    def account_id_before_last_save; end

    sig { returns(T.untyped) }
    def account_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def account_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def account_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def account_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def account_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def account_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def account_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def account_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def account_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def account_id_was; end

    sig { void }
    def account_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def amount_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def amount_col_label=(value); end

    sig { returns(T::Boolean) }
    def amount_col_label?; end

    sig { returns(T.nilable(::String)) }
    def amount_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def amount_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def amount_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def amount_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def amount_col_label_was; end

    sig { void }
    def amount_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def amount_type_inflow_value; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def amount_type_inflow_value=(value); end

    sig { returns(T::Boolean) }
    def amount_type_inflow_value?; end

    sig { returns(T.nilable(::String)) }
    def amount_type_inflow_value_before_last_save; end

    sig { returns(T.untyped) }
    def amount_type_inflow_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_type_inflow_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_type_inflow_value_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_type_inflow_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def amount_type_inflow_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_type_inflow_value_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_type_inflow_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def amount_type_inflow_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_type_inflow_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def amount_type_inflow_value_was; end

    sig { void }
    def amount_type_inflow_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def amount_type_strategy; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def amount_type_strategy=(value); end

    sig { returns(T::Boolean) }
    def amount_type_strategy?; end

    sig { returns(T.nilable(::String)) }
    def amount_type_strategy_before_last_save; end

    sig { returns(T.untyped) }
    def amount_type_strategy_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_type_strategy_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_type_strategy_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_type_strategy_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def amount_type_strategy_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_type_strategy_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_type_strategy_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def amount_type_strategy_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_type_strategy_previously_was; end

    sig { returns(T.nilable(::String)) }
    def amount_type_strategy_was; end

    sig { void }
    def amount_type_strategy_will_change!; end

    sig { returns(T.nilable(::String)) }
    def category_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def category_col_label=(value); end

    sig { returns(T::Boolean) }
    def category_col_label?; end

    sig { returns(T.nilable(::String)) }
    def category_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def category_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def category_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def category_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def category_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def category_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def category_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def category_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def category_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def category_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def category_col_label_was; end

    sig { void }
    def category_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def col_sep; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def col_sep=(value); end

    sig { returns(T::Boolean) }
    def col_sep?; end

    sig { returns(T.nilable(::String)) }
    def col_sep_before_last_save; end

    sig { returns(T.untyped) }
    def col_sep_before_type_cast; end

    sig { returns(T::Boolean) }
    def col_sep_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def col_sep_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def col_sep_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def col_sep_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def col_sep_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def col_sep_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def col_sep_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def col_sep_previously_was; end

    sig { returns(T.nilable(::String)) }
    def col_sep_was; end

    sig { void }
    def col_sep_will_change!; end

    sig { returns(T.untyped) }
    def column_mappings; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def column_mappings=(value); end

    sig { returns(T::Boolean) }
    def column_mappings?; end

    sig { returns(T.untyped) }
    def column_mappings_before_last_save; end

    sig { returns(T.untyped) }
    def column_mappings_before_type_cast; end

    sig { returns(T::Boolean) }
    def column_mappings_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def column_mappings_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def column_mappings_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def column_mappings_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def column_mappings_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def column_mappings_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def column_mappings_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def column_mappings_previously_was; end

    sig { returns(T.untyped) }
    def column_mappings_was; end

    sig { void }
    def column_mappings_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def currency_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def currency_col_label=(value); end

    sig { returns(T::Boolean) }
    def currency_col_label?; end

    sig { returns(T.nilable(::String)) }
    def currency_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def currency_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def currency_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def currency_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_col_label_was; end

    sig { void }
    def currency_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def date_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def date_col_label=(value); end

    sig { returns(T::Boolean) }
    def date_col_label?; end

    sig { returns(T.nilable(::String)) }
    def date_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def date_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def date_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def date_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def date_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def date_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def date_col_label_was; end

    sig { void }
    def date_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def date_format; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def date_format=(value); end

    sig { returns(T::Boolean) }
    def date_format?; end

    sig { returns(T.nilable(::String)) }
    def date_format_before_last_save; end

    sig { returns(T.untyped) }
    def date_format_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_format_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_format_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_format_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def date_format_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def date_format_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_format_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def date_format_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def date_format_previously_was; end

    sig { returns(T.nilable(::String)) }
    def date_format_was; end

    sig { void }
    def date_format_will_change!; end

    sig { returns(T.nilable(::String)) }
    def entity_type_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def entity_type_col_label=(value); end

    sig { returns(T::Boolean) }
    def entity_type_col_label?; end

    sig { returns(T.nilable(::String)) }
    def entity_type_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def entity_type_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def entity_type_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def entity_type_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def entity_type_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def entity_type_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def entity_type_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def entity_type_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def entity_type_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def entity_type_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def entity_type_col_label_was; end

    sig { void }
    def entity_type_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def error; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def error=(value); end

    sig { returns(T::Boolean) }
    def error?; end

    sig { returns(T.nilable(::String)) }
    def error_before_last_save; end

    sig { returns(T.untyped) }
    def error_before_type_cast; end

    sig { returns(T::Boolean) }
    def error_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def error_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def error_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def error_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def error_previously_was; end

    sig { returns(T.nilable(::String)) }
    def error_was; end

    sig { void }
    def error_will_change!; end

    sig { returns(T.nilable(::String)) }
    def exchange_operating_mic_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def exchange_operating_mic_col_label=(value); end

    sig { returns(T::Boolean) }
    def exchange_operating_mic_col_label?; end

    sig { returns(T.nilable(::String)) }
    def exchange_operating_mic_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def exchange_operating_mic_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def exchange_operating_mic_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def exchange_operating_mic_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def exchange_operating_mic_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def exchange_operating_mic_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def exchange_operating_mic_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def exchange_operating_mic_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def exchange_operating_mic_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def exchange_operating_mic_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def exchange_operating_mic_col_label_was; end

    sig { void }
    def exchange_operating_mic_col_label_will_change!; end

    sig { returns(::String) }
    def family_id; end

    sig { params(value: ::String).returns(::String) }
    def family_id=(value); end

    sig { returns(T::Boolean) }
    def family_id?; end

    sig { returns(T.nilable(::String)) }
    def family_id_before_last_save; end

    sig { returns(T.untyped) }
    def family_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def family_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def family_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def family_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def family_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def family_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def family_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def family_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def family_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def family_id_was; end

    sig { void }
    def family_id_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name_col_label=(value); end

    sig { returns(T::Boolean) }
    def name_col_label?; end

    sig { returns(T.nilable(::String)) }
    def name_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def name_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_col_label_was; end

    sig { void }
    def name_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def normalized_csv_str; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def normalized_csv_str=(value); end

    sig { returns(T::Boolean) }
    def normalized_csv_str?; end

    sig { returns(T.nilable(::String)) }
    def normalized_csv_str_before_last_save; end

    sig { returns(T.untyped) }
    def normalized_csv_str_before_type_cast; end

    sig { returns(T::Boolean) }
    def normalized_csv_str_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def normalized_csv_str_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def normalized_csv_str_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def normalized_csv_str_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def normalized_csv_str_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def normalized_csv_str_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def normalized_csv_str_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def normalized_csv_str_previously_was; end

    sig { returns(T.nilable(::String)) }
    def normalized_csv_str_was; end

    sig { void }
    def normalized_csv_str_will_change!; end

    sig { returns(T.nilable(::String)) }
    def notes_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def notes_col_label=(value); end

    sig { returns(T::Boolean) }
    def notes_col_label?; end

    sig { returns(T.nilable(::String)) }
    def notes_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def notes_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def notes_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def notes_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def notes_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def notes_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def notes_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def notes_col_label_was; end

    sig { void }
    def notes_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def number_format; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def number_format=(value); end

    sig { returns(T::Boolean) }
    def number_format?; end

    sig { returns(T.nilable(::String)) }
    def number_format_before_last_save; end

    sig { returns(T.untyped) }
    def number_format_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_format_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def number_format_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def number_format_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def number_format_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def number_format_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def number_format_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def number_format_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def number_format_previously_was; end

    sig { returns(T.nilable(::String)) }
    def number_format_was; end

    sig { void }
    def number_format_will_change!; end

    sig { returns(T.nilable(::String)) }
    def price_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def price_col_label=(value); end

    sig { returns(T::Boolean) }
    def price_col_label?; end

    sig { returns(T.nilable(::String)) }
    def price_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def price_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def price_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def price_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def price_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def price_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def price_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def price_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def price_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def price_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def price_col_label_was; end

    sig { void }
    def price_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def qty_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def qty_col_label=(value); end

    sig { returns(T::Boolean) }
    def qty_col_label?; end

    sig { returns(T.nilable(::String)) }
    def qty_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def qty_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def qty_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def qty_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def qty_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def qty_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def qty_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def qty_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def qty_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def qty_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def qty_col_label_was; end

    sig { void }
    def qty_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def raw_file_str; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def raw_file_str=(value); end

    sig { returns(T::Boolean) }
    def raw_file_str?; end

    sig { returns(T.nilable(::String)) }
    def raw_file_str_before_last_save; end

    sig { returns(T.untyped) }
    def raw_file_str_before_type_cast; end

    sig { returns(T::Boolean) }
    def raw_file_str_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def raw_file_str_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def raw_file_str_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_file_str_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def raw_file_str_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def raw_file_str_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_file_str_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def raw_file_str_previously_was; end

    sig { returns(T.nilable(::String)) }
    def raw_file_str_was; end

    sig { void }
    def raw_file_str_will_change!; end

    sig { void }
    def restore_account_col_label!; end

    sig { void }
    def restore_account_id!; end

    sig { void }
    def restore_amount_col_label!; end

    sig { void }
    def restore_amount_type_inflow_value!; end

    sig { void }
    def restore_amount_type_strategy!; end

    sig { void }
    def restore_category_col_label!; end

    sig { void }
    def restore_col_sep!; end

    sig { void }
    def restore_column_mappings!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_currency_col_label!; end

    sig { void }
    def restore_date_col_label!; end

    sig { void }
    def restore_date_format!; end

    sig { void }
    def restore_entity_type_col_label!; end

    sig { void }
    def restore_error!; end

    sig { void }
    def restore_exchange_operating_mic_col_label!; end

    sig { void }
    def restore_family_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_name_col_label!; end

    sig { void }
    def restore_normalized_csv_str!; end

    sig { void }
    def restore_notes_col_label!; end

    sig { void }
    def restore_number_format!; end

    sig { void }
    def restore_price_col_label!; end

    sig { void }
    def restore_qty_col_label!; end

    sig { void }
    def restore_raw_file_str!; end

    sig { void }
    def restore_signage_convention!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_tags_col_label!; end

    sig { void }
    def restore_ticker_col_label!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_account_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_account_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_account_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_account_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_amount_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_amount_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_amount_type_inflow_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_amount_type_inflow_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_amount_type_strategy; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_amount_type_strategy?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_category_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_category_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_col_sep; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_col_sep?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_column_mappings; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_column_mappings?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_currency_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_currency_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_date_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_date_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_date_format; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_date_format?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_entity_type_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_entity_type_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_error; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_error?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_exchange_operating_mic_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_exchange_operating_mic_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_family_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_family_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_name_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_normalized_csv_str; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_normalized_csv_str?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_notes_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_notes_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_number_format; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_number_format?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_price_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_price_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_qty_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_qty_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_raw_file_str; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_raw_file_str?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_signage_convention; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_signage_convention?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_status?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tags_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_tags_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ticker_col_label; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_ticker_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_type; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signage_convention; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def signage_convention=(value); end

    sig { returns(T::Boolean) }
    def signage_convention?; end

    sig { returns(T.nilable(::String)) }
    def signage_convention_before_last_save; end

    sig { returns(T.untyped) }
    def signage_convention_before_type_cast; end

    sig { returns(T::Boolean) }
    def signage_convention_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def signage_convention_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def signage_convention_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def signage_convention_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signage_convention_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def signage_convention_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def signage_convention_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signage_convention_previously_was; end

    sig { returns(T.nilable(::String)) }
    def signage_convention_was; end

    sig { void }
    def signage_convention_will_change!; end

    sig { returns(T.nilable(::String)) }
    def status; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tags_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tags_col_label=(value); end

    sig { returns(T::Boolean) }
    def tags_col_label?; end

    sig { returns(T.nilable(::String)) }
    def tags_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def tags_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def tags_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tags_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tags_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def tags_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tags_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tags_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def tags_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tags_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tags_col_label_was; end

    sig { void }
    def tags_col_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ticker_col_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ticker_col_label=(value); end

    sig { returns(T::Boolean) }
    def ticker_col_label?; end

    sig { returns(T.nilable(::String)) }
    def ticker_col_label_before_last_save; end

    sig { returns(T.untyped) }
    def ticker_col_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def ticker_col_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ticker_col_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ticker_col_label_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ticker_col_label_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ticker_col_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ticker_col_label_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ticker_col_label_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ticker_col_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ticker_col_label_was; end

    sig { void }
    def ticker_col_label_will_change!; end

    sig { returns(::String) }
    def type; end

    sig { params(value: ::String).returns(::String) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.nilable(::String)) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def type_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def type_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_account_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_account_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_amount_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_amount_type_inflow_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_amount_type_strategy?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_category_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_col_sep?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_column_mappings?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_currency_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_date_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_date_format?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_entity_type_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_error?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_exchange_operating_mic_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_family_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_name_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_normalized_csv_str?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_notes_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_number_format?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_price_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_qty_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_raw_file_str?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_signage_convention?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_status?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_tags_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_ticker_col_label?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def importing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_importing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_revert_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_reverting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def revert_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Import).returns(BasicObject)).returns(T::Array[::Import]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Import } }

    sig { returns(T::Array[::Import]) }
    def to_a; end

    sig { returns(T::Array[::Import]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Import } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Import } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Import } }

    sig do
      params(
        records: T.any(::Import, T::Enumerable[T.any(::Import, T::Enumerable[::Import])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Import, T::Enumerable[T.any(::Import, T::Enumerable[::Import])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Import, T::Enumerable[T.any(::Import, T::Enumerable[::Import])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Import]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Import, T::Enumerable[T.any(::Import, T::Enumerable[::Import])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Import, T::Enumerable[T.any(::Import, T::Enumerable[::Import])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Import, T::Enumerable[T.any(::Import, T::Enumerable[::Import])])
      ).returns(T::Array[::Import])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Import]) }
    def target; end

    sig { returns(T::Array[::Import]) }
    def to_a; end

    sig { returns(T::Array[::Import]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Import } }

    sig { returns(T::Array[::Import]) }
    def to_a; end

    sig { returns(T::Array[::Import]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Import } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Import } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
