# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Family`.
# Please instead update this file by running `bin/tapioca dsl Family`.


class Family
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Family).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Family).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Family]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Family)) }
    def fifth; end

    sig { returns(::Family) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Family)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Family])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Family).void).returns(T.nilable(::Family)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Family)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Family) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Family).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Family])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Family]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Family]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Family)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Family) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Family) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Family)) }
    sig { params(limit: Integer).returns(T::Array[::Family]) }
    def first(limit = nil); end

    sig { returns(::Family) }
    def first!; end

    sig { returns(T.nilable(::Family)) }
    def forty_two; end

    sig { returns(::Family) }
    def forty_two!; end

    sig { returns(T.nilable(::Family)) }
    def fourth; end

    sig { returns(::Family) }
    def fourth!; end

    sig { returns(T::Array[T.untyped]) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Family)) }
    sig { params(limit: Integer).returns(T::Array[::Family]) }
    def last(limit = nil); end

    sig { returns(::Family) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Family).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Family).void)
      ).returns(T::Array[::Family])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Family).void)).returns(::Family) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Family).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Family).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Family)) }
    def second; end

    sig { returns(::Family) }
    def second!; end

    sig { returns(T.nilable(::Family)) }
    def second_to_last; end

    sig { returns(::Family) }
    def second_to_last!; end

    sig { returns(::Family) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Family).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Family)) }
    sig { params(limit: Integer).returns(T::Array[::Family]) }
    def take(limit = nil); end

    sig { returns(::Family) }
    def take!; end

    sig { returns(T.nilable(::Family)) }
    def third; end

    sig { returns(::Family) }
    def third!; end

    sig { returns(T.nilable(::Family)) }
    def third_to_last; end

    sig { returns(::Family) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def account_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :accounts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Account::PrivateCollectionProxy) }
    def accounts; end

    sig { params(value: T::Enumerable[::Account]).void }
    def accounts=(value); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :budget_categories, through: :budgets`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::BudgetCategory::PrivateCollectionProxy) }
    def budget_categories; end

    sig { params(value: T::Enumerable[::BudgetCategory]).void }
    def budget_categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def budget_category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def budget_category_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def budget_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def budget_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :budgets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Budget::PrivateCollectionProxy) }
    def budgets; end

    sig { params(value: T::Enumerable[::Budget]).void }
    def budgets=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Subscription) }
    def build_subscription(*args, &blk); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :categories`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Category::PrivateCollectionProxy) }
    def categories; end

    sig { params(value: T::Enumerable[::Category]).void }
    def categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def category_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Subscription) }
    def create_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Subscription) }
    def create_subscription!(*args, &blk); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :entries, through: :accounts`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Entry::PrivateCollectionProxy) }
    def entries; end

    sig { params(value: T::Enumerable[::Entry]).void }
    def entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def family_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def family_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :family_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FamilyExport::PrivateCollectionProxy) }
    def family_exports; end

    sig { params(value: T::Enumerable[::FamilyExport]).void }
    def family_exports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def holding_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def holding_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :holdings, through: :accounts`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Holding::PrivateCollectionProxy) }
    def holdings; end

    sig { params(value: T::Enumerable[::Holding]).void }
    def holdings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def import_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def import_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :imports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Import::PrivateCollectionProxy) }
    def imports; end

    sig { params(value: T::Enumerable[::Import]).void }
    def imports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :invitations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Invitation::PrivateCollectionProxy) }
    def invitations; end

    sig { params(value: T::Enumerable[::Invitation]).void }
    def invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def merchant_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def merchant_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :merchants`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FamilyMerchant::PrivateCollectionProxy) }
    def merchants; end

    sig { params(value: T::Enumerable[::FamilyMerchant]).void }
    def merchants=(value); end

    sig { returns(T.nilable(::Subscription)) }
    def reload_subscription; end

    sig { void }
    def reset_subscription; end

    sig { returns(T::Array[T.untyped]) }
    def rule_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def rule_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :rules`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Rule::PrivateCollectionProxy) }
    def rules; end

    sig { params(value: T::Enumerable[::Rule]).void }
    def rules=(value); end

    sig { returns(T.nilable(::Subscription)) }
    def subscription; end

    sig { params(value: T.nilable(::Subscription)).void }
    def subscription=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sync_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sync_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :syncs`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sync::PrivateCollectionProxy) }
    def syncs; end

    sig { params(value: T::Enumerable[::Sync]).void }
    def syncs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tag_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :tags`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Tag::PrivateCollectionProxy) }
    def tags; end

    sig { params(value: T::Enumerable[::Tag]).void }
    def tags=(value); end

    sig { returns(T::Array[T.untyped]) }
    def trade_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def trade_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :trades, through: :accounts`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def trades; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def trades=(value); end

    sig { returns(T::Array[T.untyped]) }
    def transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :transactions, through: :accounts`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def transactions; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def transactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_ids=(ids); end

    # This method is created by ActiveRecord on the `Family` class because it declared `has_many :users`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def users; end

    sig { params(value: T::Enumerable[::User]).void }
    def users=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Family).returns(BasicObject)).returns(T::Array[::Family]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def auto_sync_on_login; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def auto_sync_on_login=(value); end

    sig { returns(T::Boolean) }
    def auto_sync_on_login?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_sync_on_login_before_last_save; end

    sig { returns(T.untyped) }
    def auto_sync_on_login_before_type_cast; end

    sig { returns(T::Boolean) }
    def auto_sync_on_login_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_sync_on_login_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_sync_on_login_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def auto_sync_on_login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_sync_on_login_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_sync_on_login_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def auto_sync_on_login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_sync_on_login_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_sync_on_login_was; end

    sig { void }
    def auto_sync_on_login_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def currency=(value); end

    sig { returns(T::Boolean) }
    def currency?; end

    sig { returns(T.nilable(::String)) }
    def currency_before_last_save; end

    sig { returns(T.untyped) }
    def currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_was; end

    sig { void }
    def currency_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def data_enrichment_enabled; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def data_enrichment_enabled=(value); end

    sig { returns(T::Boolean) }
    def data_enrichment_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def data_enrichment_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def data_enrichment_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def data_enrichment_enabled_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def data_enrichment_enabled_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def data_enrichment_enabled_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def data_enrichment_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def data_enrichment_enabled_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def data_enrichment_enabled_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def data_enrichment_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def data_enrichment_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def data_enrichment_enabled_was; end

    sig { void }
    def data_enrichment_enabled_will_change!; end

    sig { returns(T.nilable(::String)) }
    def date_format; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def date_format=(value); end

    sig { returns(T::Boolean) }
    def date_format?; end

    sig { returns(T.nilable(::String)) }
    def date_format_before_last_save; end

    sig { returns(T.untyped) }
    def date_format_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_format_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_format_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_format_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def date_format_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def date_format_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def date_format_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def date_format_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def date_format_previously_was; end

    sig { returns(T.nilable(::String)) }
    def date_format_was; end

    sig { void }
    def date_format_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def early_access; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def early_access=(value); end

    sig { returns(T::Boolean) }
    def early_access?; end

    sig { returns(T.nilable(T::Boolean)) }
    def early_access_before_last_save; end

    sig { returns(T.untyped) }
    def early_access_before_type_cast; end

    sig { returns(T::Boolean) }
    def early_access_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def early_access_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def early_access_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def early_access_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def early_access_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def early_access_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def early_access_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def early_access_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def early_access_was; end

    sig { void }
    def early_access_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_activity_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_activity_at=(value); end

    sig { returns(T::Boolean) }
    def latest_sync_activity_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_activity_at_before_last_save; end

    sig { returns(T.untyped) }
    def latest_sync_activity_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def latest_sync_activity_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def latest_sync_activity_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def latest_sync_activity_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def latest_sync_activity_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_activity_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def latest_sync_activity_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def latest_sync_activity_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_activity_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_activity_at_was; end

    sig { void }
    def latest_sync_activity_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_completed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_completed_at=(value); end

    sig { returns(T::Boolean) }
    def latest_sync_completed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_completed_at_before_last_save; end

    sig { returns(T.untyped) }
    def latest_sync_completed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def latest_sync_completed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def latest_sync_completed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def latest_sync_completed_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def latest_sync_completed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_completed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def latest_sync_completed_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def latest_sync_completed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_completed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def latest_sync_completed_at_was; end

    sig { void }
    def latest_sync_completed_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def locale; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def locale=(value); end

    sig { returns(T::Boolean) }
    def locale?; end

    sig { returns(T.nilable(::String)) }
    def locale_before_last_save; end

    sig { returns(T.untyped) }
    def locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def locale_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def locale_was; end

    sig { void }
    def locale_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { void }
    def restore_auto_sync_on_login!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_currency!; end

    sig { void }
    def restore_data_enrichment_enabled!; end

    sig { void }
    def restore_date_format!; end

    sig { void }
    def restore_early_access!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_latest_sync_activity_at!; end

    sig { void }
    def restore_latest_sync_completed_at!; end

    sig { void }
    def restore_locale!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_stripe_customer_id!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_auto_sync_on_login; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_auto_sync_on_login?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_country?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_currency; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_currency?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_data_enrichment_enabled; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_data_enrichment_enabled?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_date_format; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_date_format?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_early_access; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_early_access?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_latest_sync_activity_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_latest_sync_activity_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_latest_sync_completed_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_latest_sync_completed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_locale; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_locale?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_name?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_customer_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_stripe_customer_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timezone; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_timezone?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_customer_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_customer_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_customer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_customer_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_customer_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def stripe_customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_customer_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def stripe_customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_was; end

    sig { void }
    def stripe_customer_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def timezone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def timezone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def timezone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_auto_sync_on_login?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_country?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_currency?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_data_enrichment_enabled?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_date_format?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_early_access?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_latest_sync_activity_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_latest_sync_completed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_locale?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_name?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_stripe_customer_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_timezone?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Family).returns(BasicObject)).returns(T::Array[::Family]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Family } }

    sig { returns(T::Array[::Family]) }
    def to_a; end

    sig { returns(T::Array[::Family]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Family } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Family } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Family } }

    sig do
      params(
        records: T.any(::Family, T::Enumerable[T.any(::Family, T::Enumerable[::Family])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Family, T::Enumerable[T.any(::Family, T::Enumerable[::Family])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Family, T::Enumerable[T.any(::Family, T::Enumerable[::Family])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Family]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Family, T::Enumerable[T.any(::Family, T::Enumerable[::Family])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Family, T::Enumerable[T.any(::Family, T::Enumerable[::Family])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Family, T::Enumerable[T.any(::Family, T::Enumerable[::Family])])
      ).returns(T::Array[::Family])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Family]) }
    def target; end

    sig { returns(T::Array[::Family]) }
    def to_a; end

    sig { returns(T::Array[::Family]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Family } }

    sig { returns(T::Array[::Family]) }
    def to_a; end

    sig { returns(T::Array[::Family]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Family } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Family } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
