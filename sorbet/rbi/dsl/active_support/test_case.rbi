# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.


class ActiveSupport::TestCase
  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Account]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Account) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Account]) }
  def accounts(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ActiveStorage::Attachment]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ActiveStorage::Attachment) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ActiveStorage::Attachment])
  end
  def active_storage_attachments(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ActiveStorage::Blob]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ActiveStorage::Blob) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ActiveStorage::Blob])
  end
  def active_storage_blobs(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Address]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Address) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Address]) }
  def addresses(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ApiKey]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ApiKey) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[ApiKey]) }
  def api_keys(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Balance]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Balance) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Balance]) }
  def balances(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Budget]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Budget) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Budget]) }
  def budgets(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Category]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Category) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Category])
  end
  def categories(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Chat]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Chat) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Chat]) }
  def chats(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[CreditCard]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(CreditCard) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[CreditCard])
  end
  def credit_cards(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Crypto]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Crypto) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Crypto]) }
  def cryptos(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Depository]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Depository) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Depository])
  end
  def depositories(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Entry]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Entry) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Entry]) }
  def entries(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ExchangeRate]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ExchangeRate) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ExchangeRate])
  end
  def exchange_rates(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Family]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Family) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Family]) }
  def families(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[FamilyExport]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(FamilyExport) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[FamilyExport])
  end
  def family_exports(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Holding]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Holding) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Holding]) }
  def holdings(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ImpersonationSessionLog]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ImpersonationSessionLog) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ImpersonationSessionLog])
  end
  def impersonation_session_logs(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ImpersonationSession]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ImpersonationSession) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ImpersonationSession])
  end
  def impersonation_sessions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Import::Mapping]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Import::Mapping) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Import::Mapping])
  end
  def import_mappings(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Import::Row]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Import::Row) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Import::Row])
  end
  def import_rows(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Import]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Import) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Import]) }
  def imports(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Investment]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Investment) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Investment])
  end
  def investments(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Invitation]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Invitation) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Invitation])
  end
  def invitations(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Loan]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Loan) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Loan]) }
  def loans(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Merchant]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Merchant) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Merchant])
  end
  def merchants(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Message]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Message) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Message]) }
  def messages(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[MobileDevice]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(MobileDevice) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[MobileDevice])
  end
  def mobile_devices(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[OtherAsset]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(OtherAsset) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[OtherAsset])
  end
  def other_assets(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[OtherLiability]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(OtherLiability) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[OtherLiability])
  end
  def other_liabilities(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[T.untyped]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(T.untyped) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[T.untyped])
  end
  def plaid_accounts(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[T.untyped]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(T.untyped) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[T.untyped])
  end
  def plaid_items(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Property]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Property) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Property])
  end
  def properties(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Rule::Action]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Rule::Action) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Rule::Action])
  end
  def rule_actions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Rule::Condition]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Rule::Condition) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Rule::Condition])
  end
  def rule_conditions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Rule]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Rule) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Rule]) }
  def rules(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Security]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Security) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Security])
  end
  def securities(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Security::Price]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Security::Price) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Security::Price])
  end
  def security_prices(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Session]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Session) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Session]) }
  def sessions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Subscription]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Subscription) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Subscription])
  end
  def subscriptions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Sync]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Sync) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Sync]) }
  def syncs(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Tagging]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Tagging) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Tagging]) }
  def taggings(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Tag]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Tag) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Tag]) }
  def tags(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ToolCall]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ToolCall) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ToolCall])
  end
  def tool_calls(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Trade]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Trade) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Trade]) }
  def trades(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Transaction]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Transaction) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Transaction])
  end
  def transactions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Transfer]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Transfer) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Transfer])
  end
  def transfers(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[User]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(User) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[User]) }
  def users(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Valuation]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Valuation) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Valuation])
  end
  def valuations(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Vehicle]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Vehicle) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Vehicle]) }
  def vehicles(fixture_name = nil, *other_fixtures); end
end
