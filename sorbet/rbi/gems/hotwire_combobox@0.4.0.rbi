# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hotwire_combobox` gem.
# Please instead update this file by running `bin/tapioca gem hotwire_combobox`.


class ActionView::Base
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::HotwireCombobox::Helper
end

class ActionView::Helpers::FormBuilder
  include ::HotwireCombobox::Engine::FormBuilderExtensions
end

module ERB::Escape; end

# source://hotwire_combobox//lib/hotwire_combobox/version.rb#1
module HotwireCombobox
  # source://hotwire_combobox//lib/hotwire_combobox.rb#6
  def bypass_convenience_methods; end

  # source://hotwire_combobox//lib/hotwire_combobox.rb#6
  def bypass_convenience_methods=(val); end

  class << self
    # source://hotwire_combobox//lib/hotwire_combobox.rb#6
    def bypass_convenience_methods; end

    # source://hotwire_combobox//lib/hotwire_combobox.rb#6
    def bypass_convenience_methods=(val); end

    # @return [Boolean]
    #
    # source://hotwire_combobox//lib/hotwire_combobox.rb#14
    def bypass_convenience_methods?; end

    # source://hotwire_combobox//lib/hotwire_combobox/engine.rb#3
    def railtie_helpers_paths; end

    # source://hotwire_combobox//lib/hotwire_combobox/engine.rb#3
    def railtie_namespace; end

    # source://hotwire_combobox//lib/hotwire_combobox/engine.rb#3
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # @yield [_self]
    # @yieldparam _self [HotwireCombobox] the object that the method was called on
    #
    # source://hotwire_combobox//lib/hotwire_combobox.rb#10
    def setup; end

    # source://hotwire_combobox//lib/hotwire_combobox.rb#18
    def stylesheet_path; end

    # source://hotwire_combobox//lib/hotwire_combobox/engine.rb#3
    def table_name_prefix; end

    # source://hotwire_combobox//lib/hotwire_combobox/engine.rb#3
    def use_relative_model_naming?; end
  end
end

class HotwireCombobox::Component
  include ::HotwireCombobox::Component::Paginated
  include ::HotwireCombobox::Component::Multiselect
  include ::HotwireCombobox::Component::Freetext
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::HotwireCombobox::Component::Customizable
  include ::HotwireCombobox::Component::Async
  include ::HotwireCombobox::Component::Associations
  include ::HotwireCombobox::Component::Announced
  include ::HotwireCombobox::Component::Markup::Wrapper
  include ::HotwireCombobox::Component::Markup::Listbox
  include ::HotwireCombobox::Component::Markup::Label
  include ::HotwireCombobox::Component::Markup::Input
  include ::HotwireCombobox::Component::Markup::HiddenField
  include ::HotwireCombobox::Component::Markup::Handle
  include ::HotwireCombobox::Component::Markup::Form
  include ::HotwireCombobox::Component::Markup::Fieldset
  include ::HotwireCombobox::Component::Markup::Dialog
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods

  def initialize(view, name, association_name: T.unsafe(nil), async_src: T.unsafe(nil), autocomplete: T.unsafe(nil), data: T.unsafe(nil), dialog_label: T.unsafe(nil), form: T.unsafe(nil), free_text: T.unsafe(nil), id: T.unsafe(nil), input: T.unsafe(nil), label: T.unsafe(nil), mobile_at: T.unsafe(nil), multiselect_chip_src: T.unsafe(nil), name_when_new: T.unsafe(nil), open: T.unsafe(nil), options: T.unsafe(nil), preload: T.unsafe(nil), request: T.unsafe(nil), value: T.unsafe(nil), **rest); end

  def __callbacks; end
  def __callbacks?; end
  def _run_validate_callbacks(&block); end
  def _validate_callbacks; end
  def _validators; end
  def _validators?; end
  def label; end
  def model_name(&_arg0); end
  def options; end
  def render_in(view_context, &block); end
  def validation_context; end

  private

  def association_name; end
  def autocomplete; end
  def canonical_id; end
  def combobox_attrs; end
  def data; end
  def form; end
  def free_text; end
  def id; end
  def mobile_at; end
  def multiselect_chip_src; end
  def name; end
  def open; end
  def preload; end
  def request; end
  def validation_context=(_arg0); end
  def value; end
  def view; end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validate_callbacks; end
    def _validate_callbacks=(value); end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end
end

module HotwireCombobox::Component::Announced
  def announcer_attrs; end
end

module HotwireCombobox::Component::Associations
  private

  def associated_object; end
  def association_exists?; end
  def infer_association_name; end
end

module HotwireCombobox::Component::Async
  private

  def async_src; end
end

module HotwireCombobox::Component::Customizable
  def customize_dialog(**attrs); end
  def customize_dialog_input(**attrs); end
  def customize_dialog_label(**attrs); end
  def customize_dialog_listbox(**attrs); end
  def customize_dialog_wrapper(**attrs); end
  def customize_fieldset(**attrs); end
  def customize_handle(**attrs); end
  def customize_hidden_field(**attrs); end
  def customize_input(**attrs); end
  def customize_label(**attrs); end
  def customize_listbox(**attrs); end
  def customize_main_wrapper(**attrs); end

  private

  def custom_attrs; end
  def customize(element, base: T.unsafe(nil)); end
  def store_customizations(element, **attrs); end
end

HotwireCombobox::Component::Customizable::CUSTOMIZABLE_ELEMENTS = T.let(T.unsafe(nil), Array)
HotwireCombobox::Component::Customizable::PROTECTED_ATTRS = T.let(T.unsafe(nil), Array)

module HotwireCombobox::Component::Freetext
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  private

  def name_when_new; end
  def name_when_new_on_multiselect_must_match_original_name; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

module HotwireCombobox::Component::Markup; end

module HotwireCombobox::Component::Markup::Dialog
  def dialog_attrs; end
  def dialog_focus_trap_attrs; end
  def dialog_input_attrs; end
  def dialog_label; end
  def dialog_label_attrs; end
  def dialog_listbox_attrs; end
  def dialog_wrapper_attrs; end

  private

  def dialog_input_aria; end
  def dialog_input_data; end
  def dialog_input_id; end
  def dialog_listbox_id; end
end

module HotwireCombobox::Component::Markup::Fieldset
  def fieldset_attrs; end

  private

  def fieldset_data; end
  def platform_classes; end
  def prefilled_display; end
end

module HotwireCombobox::Component::Markup::Form
  private

  def form_object; end
end

module HotwireCombobox::Component::Markup::Handle
  def handle_attrs; end
end

module HotwireCombobox::Component::Markup::HiddenField
  def hidden_field_attrs; end

  private

  def hidden_field_id; end
  def hidden_field_name; end
  def hidden_field_value; end
end

module HotwireCombobox::Component::Markup::Input
  def input_attrs; end

  private

  def input_aria; end
  def input_data; end
  def input_id; end
  def input_type; end
end

module HotwireCombobox::Component::Markup::Label
  def label_attrs; end
end

module HotwireCombobox::Component::Markup::Listbox
  def listbox_attrs; end

  private

  def listbox_id; end
end

module HotwireCombobox::Component::Markup::Wrapper
  def main_wrapper_attrs; end
end

module HotwireCombobox::Component::Multiselect
  private

  def multiselect?; end
end

module HotwireCombobox::Component::Paginated
  def paginated?; end
  def pagination_attrs; end

  private

  def preload?; end
  def preload_next_page?; end
end

# source://hotwire_combobox//lib/hotwire_combobox/engine.rb#2
class HotwireCombobox::Engine < ::Rails::Engine; end

# source://hotwire_combobox//lib/hotwire_combobox/engine.rb#11
module HotwireCombobox::Engine::FormBuilderExtensions
  # source://hotwire_combobox//lib/hotwire_combobox/engine.rb#12
  def combobox(*args, **kwargs, &block); end
end

# source://hotwire_combobox//lib/hotwire_combobox/helper.rb#2
module HotwireCombobox::Helper
  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def async_combobox_options(options, for_id: T.unsafe(nil), src: T.unsafe(nil), next_page: T.unsafe(nil), render_in: T.unsafe(nil), include_blank: T.unsafe(nil), **custom_methods); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_chip_remover_attrs(display:, value:, **kwargs); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_dismissing_chip_remover_attrs(display, value); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_options(options, render_in: T.unsafe(nil), include_blank: T.unsafe(nil), display: T.unsafe(nil), **custom_methods); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_selection_chip(display:, value:, for_id: T.unsafe(nil), remover_attrs: T.unsafe(nil)); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_selection_chips_for(objects, display: T.unsafe(nil), value: T.unsafe(nil), for_id: T.unsafe(nil)); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_style_tag(*args, **kwargs); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def combobox_tag(name, options_or_src = T.unsafe(nil), render_in: T.unsafe(nil), include_blank: T.unsafe(nil), **kwargs, &block); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def dismissing_combobox_selection_chip(display:, value:, for_id: T.unsafe(nil)); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def dismissing_combobox_selection_chips_for(objects, display: T.unsafe(nil), value: T.unsafe(nil), for_id: T.unsafe(nil)); end

  # setup up backward compatibility with old `#hw_paginated_combobox_options`
  #
  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#36
  def hw_async_combobox_options(options, for_id: T.unsafe(nil), src: T.unsafe(nil), next_page: T.unsafe(nil), render_in: T.unsafe(nil), include_blank: T.unsafe(nil), **custom_methods); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#125
  def hw_call_method_or_proc(object, method_or_proc); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#63
  def hw_combobox_chip_remover_attrs(display:, value:, **kwargs); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#76
  def hw_combobox_dismissing_chip_remover_attrs(display, value); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#23
  def hw_combobox_options(options, render_in: T.unsafe(nil), include_blank: T.unsafe(nil), display: T.unsafe(nil), **custom_methods); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#108
  def hw_combobox_page_stream_action; end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#42
  def hw_combobox_selection_chip(display:, value:, for_id: T.unsafe(nil), remover_attrs: T.unsafe(nil)); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#47
  def hw_combobox_selection_chips_for(objects, display: T.unsafe(nil), value: T.unsafe(nil), for_id: T.unsafe(nil)); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#13
  def hw_combobox_style_tag(*args, **kwargs); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#17
  def hw_combobox_tag(name, options_or_src = T.unsafe(nil), render_in: T.unsafe(nil), include_blank: T.unsafe(nil), **kwargs, &block); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#53
  def hw_dismissing_combobox_selection_chip(display:, value:, for_id: T.unsafe(nil)); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#57
  def hw_dismissing_combobox_selection_chips_for(objects, display: T.unsafe(nil), value: T.unsafe(nil), for_id: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#112
  def hw_first_page?; end

  # private library use only
  #
  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#96
  def hw_listbox_id(id); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#27
  def hw_paginated_combobox_options(options, for_id: T.unsafe(nil), src: T.unsafe(nil), next_page: T.unsafe(nil), render_in: T.unsafe(nil), include_blank: T.unsafe(nil), **custom_methods); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#104
  def hw_pagination_frame_id(id); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#100
  def hw_pagination_frame_wrapper_id(id); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#116
  def hw_uri_with_params(url_or_path, **params); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#38
  def hw_within_combobox_selection_chip(for_id: T.unsafe(nil), &block); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def paginated_combobox_options(options, for_id: T.unsafe(nil), src: T.unsafe(nil), next_page: T.unsafe(nil), render_in: T.unsafe(nil), include_blank: T.unsafe(nil), **custom_methods); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#8
  def within_combobox_selection_chip(for_id: T.unsafe(nil), &block); end

  private

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#153
  def hw_call_method(object, method); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#139
  def hw_combobox_next_page_uri(uri, next_page, for_id); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#145
  def hw_extract_options_and_src(options_or_src, render_in, include_blank); end

  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#134
  def hw_fullpath_for_pagination; end

  # @raise [NoMethodError]
  #
  # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#161
  def hw_raise_no_public_method_error(object, method); end

  class << self
    # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#4
    def bypass_convenience_methods?(*_arg0, **_arg1, &_arg2); end

    # source://hotwire_combobox//lib/hotwire_combobox/helper.rb#6
    def hw_alias(method_name); end
  end
end

module HotwireCombobox::Listbox; end

class HotwireCombobox::Listbox::Group
  def initialize(name, options:); end

  def options; end
  def render_in(view); end

  private

  def group_attrs; end
  def id; end
  def label_attrs; end
  def name; end
end

class HotwireCombobox::Listbox::Item
  def initialize(view, options, render_in:, include_blank:, **custom_methods); end

  def collection; end

  private

  def blank_option; end
  def create_listbox_group(options); end
  def create_listbox_options(options); end
  def custom_methods; end
  def extract_blank_display_and_content; end
  def grouped?; end
  def groups_or_options; end
  def include_blank; end
  def option_attrs(option); end
  def options; end
  def render_content(object:, attrs:, render_opts: T.unsafe(nil)); end
  def render_in; end
  def view; end

  class << self
    def collection_for(view, options, render_in:, include_blank:, **custom_methods); end
  end
end

class HotwireCombobox::Listbox::Item::Collection < ::Array
  def find_by_value(value); end

  private

  def grouped?; end
end

class HotwireCombobox::Listbox::Option
  def initialize(option); end

  def autocompletable_as; end
  def render_in(view); end
  def value; end

  private

  def blank?; end
  def content; end
  def filterable_as; end
  def id; end
  def option; end
  def options; end
end

class HotwireCombobox::Listbox::Option::Data < ::Struct
  def autocompletable_as; end
  def autocompletable_as=(_); end
  def blank; end
  def blank=(_); end
  def content; end
  def content=(_); end
  def display; end
  def display=(_); end
  def filterable_as; end
  def filterable_as=(_); end
  def id; end
  def id=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://hotwire_combobox//lib/hotwire_combobox/platform.rb#3
class HotwireCombobox::Platform < ::PlatformAgent
  # @return [Boolean]
  #
  # source://hotwire_combobox//lib/hotwire_combobox/platform.rb#8
  def android?; end

  # @return [Boolean]
  #
  # source://hotwire_combobox//lib/hotwire_combobox/platform.rb#4
  def ios?; end

  # @return [Boolean]
  #
  # source://hotwire_combobox//lib/hotwire_combobox/platform.rb#12
  def mobile_webkit?; end
end

# source://hotwire_combobox//lib/hotwire_combobox/version.rb#2
HotwireCombobox::VERSION = T.let(T.unsafe(nil), String)
