# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails-settings-cached` gem.
# Please instead update this file by running `bin/tapioca gem rails-settings-cached`.


# source://rails-settings-cached//lib/rails-settings/fields/base.rb#1
module RailsSettings
  class << self
    # source://rails-settings-cached//lib/rails-settings/configuration.rb#11
    def config; end

    # source://rails-settings-cached//lib/rails-settings/configuration.rb#19
    def configure(&block); end

    # source://rails-settings-cached//lib/rails-settings/version.rb#5
    def version; end
  end
end

# source://rails-settings-cached//lib/rails-settings/base.rb#4
class RailsSettings::Base < ::ActiveRecord::Base
  include ::RailsSettings::Base::GeneratedAttributeMethods
  include ::RailsSettings::Base::GeneratedAssociationMethods

  # source://rails-settings-cached//lib/rails-settings/base.rb#25
  def clear_cache; end

  # get the value field, YAML decoded
  #
  # source://rails-settings-cached//lib/rails-settings/base.rb#11
  def value; end

  # set the value field, YAML encoded
  #
  # source://rails-settings-cached//lib/rails-settings/base.rb#21
  def value=(new_value); end

  class << self
    # source://rails-settings-cached//lib/rails-settings/base.rb#8
    def __callbacks; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#39
    def _rails_scope(name, body, &block); end

    # source://rails-settings-cached//lib/rails-settings/base.rb#4
    def _validators; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#60
    def cache_key; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#56
    def cache_prefix(&block); end

    # source://rails-settings-cached//lib/rails-settings/base.rb#30
    def clear_cache; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#4
    def defined_enums; end

    # Returns the value of attribute defined_fields.
    #
    # source://rails-settings-cached//lib/rails-settings/base.rb#78
    def defined_fields; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#70
    def editable_keys; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#35
    def field(key, **opts); end

    # source://rails-settings-cached//lib/rails-settings/base.rb#52
    def get_field(key); end

    # source://rails-settings-cached//lib/rails-settings/base.rb#66
    def keys; end

    # source://rails-settings-cached//lib/rails-settings/base.rb#74
    def readonly_keys; end

    # @yield [block]
    #
    # source://rails-settings-cached//lib/rails-settings/base.rb#40
    def scope(*args, &block); end

    private

    # source://rails-settings-cached//lib/rails-settings/base.rb#125
    def _all_settings; end

    # @raise [ProtectedKeyError]
    #
    # source://rails-settings-cached//lib/rails-settings/base.rb#82
    def _define_field(key, default: T.unsafe(nil), type: T.unsafe(nil), readonly: T.unsafe(nil), separator: T.unsafe(nil), validates: T.unsafe(nil), **opts); end

    # source://rails-settings-cached//lib/rails-settings/base.rb#134
    def cache_storage; end

    # @return [Boolean]
    #
    # source://rails-settings-cached//lib/rails-settings/base.rb#121
    def rails_initialized?; end
  end
end

# source://rails-settings-cached//lib/rails-settings/base.rb#4
module RailsSettings::Base::GeneratedAssociationMethods; end

# source://rails-settings-cached//lib/rails-settings/base.rb#4
module RailsSettings::Base::GeneratedAttributeMethods; end

# source://rails-settings-cached//lib/rails-settings/base.rb#5
RailsSettings::Base::PROTECTED_KEYS = T.let(T.unsafe(nil), Array)

# source://rails-settings-cached//lib/rails-settings/configuration.rb#4
class RailsSettings::Configuration
  # Caching storage backend.
  # Default: `Rails.cache`
  #
  # source://rails-settings-cached//lib/rails-settings/configuration.rb#7
  def cache_storage; end

  # Caching storage backend.
  # Default: `Rails.cache`
  #
  # source://rails-settings-cached//lib/rails-settings/configuration.rb#7
  def cache_storage=(_arg0); end
end

# source://rails-settings-cached//lib/rails-settings/fields/base.rb#2
module RailsSettings::Fields; end

# source://rails-settings-cached//lib/rails-settings/fields/array.rb#3
class RailsSettings::Fields::Array < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/array.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/array.rb#12
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/fields/base.rb#3
class RailsSettings::Fields::Base < ::Struct
  # @return [Base] a new instance of Base
  #
  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#6
  def initialize(scope:, key:, default:, parent:, readonly:, separator:, type:, options:); end

  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#31
  def default_value; end

  # @raise [NotImplementedError]
  #
  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#41
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#35
  def read; end

  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#13
  def save!(value:); end

  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#21
  def saved_value; end

  # @raise [NotImplementedError]
  #
  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#45
  def serialize(value); end

  # @return [Boolean]
  #
  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#53
  def table_exists?; end

  # source://rails-settings-cached//lib/rails-settings/fields/base.rb#49
  def to_h; end

  class << self
    # source://rails-settings-cached//lib/rails-settings/fields/base.rb#60
    def generate(**args); end

    private

    # source://rails-settings-cached//lib/rails-settings/fields/base.rb#66
    def fetch_field_class(type); end
  end
end

# source://rails-settings-cached//lib/rails-settings/fields/base.rb#4
RailsSettings::Fields::Base::SEPARATOR_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://rails-settings-cached//lib/rails-settings/fields/big_decimal.rb#3
class RailsSettings::Fields::BigDecimal < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/big_decimal.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/big_decimal.rb#10
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/fields/boolean.rb#3
class RailsSettings::Fields::Boolean < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/boolean.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/boolean.rb#10
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/fields/float.rb#3
class RailsSettings::Fields::Float < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/float.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/float.rb#10
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/fields/hash.rb#3
class RailsSettings::Fields::Hash < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/hash.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/hash.rb#16
  def load_value(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/hash.rb#12
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/fields/integer.rb#3
class RailsSettings::Fields::Integer < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/integer.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/integer.rb#10
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/fields/string.rb#3
class RailsSettings::Fields::String < ::RailsSettings::Fields::Base
  # source://rails-settings-cached//lib/rails-settings/fields/string.rb#4
  def deserialize(value); end

  # source://rails-settings-cached//lib/rails-settings/fields/string.rb#10
  def serialize(value); end
end

# source://rails-settings-cached//lib/rails-settings/middleware.rb#2
class RailsSettings::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://rails-settings-cached//lib/rails-settings/middleware.rb#3
  def initialize(app); end

  # source://rails-settings-cached//lib/rails-settings/middleware.rb#7
  def call(env); end
end

# source://rails-settings-cached//lib/rails-settings-cached.rb#19
class RailsSettings::ProtectedKeyError < ::RuntimeError
  # @return [ProtectedKeyError] a new instance of ProtectedKeyError
  #
  # source://rails-settings-cached//lib/rails-settings-cached.rb#20
  def initialize(key); end
end

# source://rails-settings-cached//lib/rails-settings/railtie.rb#4
class RailsSettings::Railtie < ::Rails::Railtie; end

# For storage all settings in Current, it will reset after per request completed.
# Base on ActiveSupport::CurrentAttributes
# https://api.rubyonrails.org/classes/ActiveSupport/CurrentAttributes.html
#
# source://rails-settings-cached//lib/rails-settings/request_cache.rb#32
class RailsSettings::RequestCache < ::ActiveSupport::CurrentAttributes
  include ::RailsSettings::RequestCacheGetter
  extend ::RailsSettings::RequestCacheGetter::ClassMethods

  class << self
    # source://rails-settings-cached//lib/rails-settings/request_cache.rb#34
    def defaults; end

    # source://rails-settings-cached//lib/rails-settings/request_cache.rb#34
    def settings; end

    # source://rails-settings-cached//lib/rails-settings/request_cache.rb#34
    def settings=(value); end
  end
end

# source://rails-settings-cached//lib/rails-settings/request_cache.rb#2
module RailsSettings::RequestCacheGetter
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::RailsSettings::RequestCacheGetter::ClassMethods
end

# source://rails-settings-cached//lib/rails-settings/request_cache.rb#5
module RailsSettings::RequestCacheGetter::ClassMethods
  # source://rails-settings-cached//lib/rails-settings/request_cache.rb#18
  def all_settings; end

  # source://rails-settings-cached//lib/rails-settings/request_cache.rb#22
  def all_settings=(val); end

  # source://rails-settings-cached//lib/rails-settings/request_cache.rb#10
  def disable!; end

  # source://rails-settings-cached//lib/rails-settings/request_cache.rb#6
  def enable!; end

  # source://rails-settings-cached//lib/rails-settings/request_cache.rb#14
  def enabled?; end
end
