# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `intercom-rails` gem.
# Please instead update this file by running `bin/tapioca gem intercom-rails`.


# source://intercom-rails//lib/intercom-rails/exceptions.rb#1
module IntercomRails
  class << self
    # source://intercom-rails//lib/intercom-rails.rb#17
    def config; end
  end
end

# source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#5
module IntercomRails::AutoInclude; end

# source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#12
class IntercomRails::AutoInclude::Filter
  # @return [Filter] a new instance of Filter
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#31
  def initialize(kontroller); end

  # Returns the value of attribute controller.
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#29
  def controller; end

  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#47
  def csp_sha256; end

  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#35
  def include_javascript!; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#39
  def include_javascript?; end

  private

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#92
  def enabled_for_environment?; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#56
  def html_content_type?; end

  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#72
  def intercom_script_tag; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#68
  def intercom_script_tag_called_manually?; end

  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#52
  def response; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#64
  def response_has_closing_body_tag?; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#88
  def show_everywhere?; end

  class << self
    # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#16
    def filter(controller); end
  end
end

# source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#14
IntercomRails::AutoInclude::Filter::BLOCKED_CONTROLLER_NAMES = T.let(T.unsafe(nil), Array)

# source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#13
IntercomRails::AutoInclude::Filter::CLOSING_BODY_TAG = T.let(T.unsafe(nil), String)

# source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#6
module IntercomRails::AutoInclude::Method
  # source://intercom-rails//lib/intercom-rails/auto_include_filter.rb#7
  def intercom_rails_auto_include; end
end

# source://intercom-rails//lib/intercom-rails/config.rb#59
class IntercomRails::Config < ::IntercomRails::ConfigSingleton
  class << self
    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def api_base; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def api_base=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#114
    def api_key=(*_arg0); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def api_secret; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def api_secret=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def app_id; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def app_id=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#33
    def company; end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def enabled_environments; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def enabled_environments=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def encrypted_mode; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def encrypted_mode=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def hide_default_launcher; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def hide_default_launcher=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#33
    def inbox; end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def include_for_logged_out_users; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def include_for_logged_out_users=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#33
    def jwt; end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def library_url; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def library_url=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#93
    def reset!; end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def session_duration; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def session_duration=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#33
    def user; end
  end
end

# source://intercom-rails//lib/intercom-rails/config.rb#73
IntercomRails::Config::ARRAY_VALIDATOR = T.let(T.unsafe(nil), Proc)

# source://intercom-rails//lib/intercom-rails/config.rb#61
IntercomRails::Config::CUSTOM_DATA_VALIDATOR = T.let(T.unsafe(nil), Proc)

# source://intercom-rails//lib/intercom-rails/config.rb#31
class IntercomRails::Config::Company < ::IntercomRails::Config
  class << self
    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def current; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def current=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def custom_data; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def custom_data=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def exclude_if; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def exclude_if=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def monthly_spend; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def monthly_spend=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def plan; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def plan=(value); end
  end
end

# source://intercom-rails//lib/intercom-rails/config.rb#81
IntercomRails::Config::IS_ARAY_OF_PROC_VALIDATOR = T.let(T.unsafe(nil), Proc)

# source://intercom-rails//lib/intercom-rails/config.rb#85
IntercomRails::Config::IS_PROC_OR_ARRAY_OF_PROC_VALIDATOR = T.let(T.unsafe(nil), Proc)

# source://intercom-rails//lib/intercom-rails/config.rb#77
IntercomRails::Config::IS_PROC_VALIDATOR = T.let(T.unsafe(nil), Proc)

# source://intercom-rails//lib/intercom-rails/config.rb#31
class IntercomRails::Config::Inbox < ::IntercomRails::Config
  class << self
    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def counter; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def counter=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def custom_activator; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def custom_activator=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def style; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def style=(value); end
  end
end

# source://intercom-rails//lib/intercom-rails/config.rb#31
class IntercomRails::Config::Jwt < ::IntercomRails::Config
  class << self
    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def enabled; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def enabled=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def expiry; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def expiry=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def signed_user_fields; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def signed_user_fields=(value); end
  end
end

# source://intercom-rails//lib/intercom-rails/config.rb#31
class IntercomRails::Config::User < ::IntercomRails::Config
  class << self
    # source://intercom-rails//lib/intercom-rails/config.rb#125
    def company_association=(*_arg0); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def current; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def current=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def custom_data; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def custom_data=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def exclude_if; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def exclude_if=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def lead_attributes; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def lead_attributes=(value); end

    # source://intercom-rails//lib/intercom-rails/config.rb#17
    def model; end

    # source://intercom-rails//lib/intercom-rails/config.rb#23
    def model=(value); end
  end
end

# source://intercom-rails//lib/intercom-rails/config.rb#5
class IntercomRails::ConfigSingleton
  class << self
    # source://intercom-rails//lib/intercom-rails/config.rb#7
    def config_accessor(*args, &block); end

    # source://intercom-rails//lib/intercom-rails/config.rb#29
    def config_group(name, &block); end

    # source://intercom-rails//lib/intercom-rails/config.rb#16
    def config_reader(name); end

    # source://intercom-rails//lib/intercom-rails/config.rb#22
    def config_writer(name, &block); end

    # source://intercom-rails//lib/intercom-rails/config.rb#12
    def meta_class; end

    # source://intercom-rails//lib/intercom-rails/config.rb#53
    def underscored_class_name; end

    # source://intercom-rails//lib/intercom-rails/config.rb#43
    def validate(name, value, block); end
  end
end

# source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#3
module IntercomRails::CustomDataHelper
  # This helper allows custom data attributes to be added to a user
  # for the current request from within the controller. e.g.
  #
  # def destroy
  #   intercom_custom_data.user['canceled_at'] = Time.now
  #   ...
  # end
  #
  # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#13
  def intercom_custom_data; end
end

# source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
class IntercomRails::CustomDataHelper::STORE < ::Struct
  # Returns the value of attribute company
  #
  # @return [Object] the current value of company
  #
  # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
  def company; end

  # Sets the attribute company
  #
  # @param value [Object] the value to set the attribute company to.
  # @return [Object] the newly set value
  #
  # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
  def company=(_); end

  # Returns the value of attribute user
  #
  # @return [Object] the current value of user
  #
  # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
  def user; end

  # Sets the attribute user
  #
  # @param value [Object] the value to set the attribute user to.
  # @return [Object] the newly set value
  #
  # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
  def user=(_); end

  class << self
    # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
    def [](*_arg0); end

    # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
    def inspect; end

    # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
    def keyword_init?; end

    # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
    def members; end

    # source://intercom-rails//lib/intercom-rails/custom_data_helper.rb#4
    def new(*_arg0); end
  end
end

# source://intercom-rails//lib/intercom-rails/date_helper.rb#2
class IntercomRails::DateHelper
  class << self
    # source://intercom-rails//lib/intercom-rails/date_helper.rb#3
    def convert_dates_to_unix_timestamps(object); end
  end
end

# source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#2
class IntercomRails::EncryptedMode
  # @return [EncryptedMode] a new instance of EncryptedMode
  #
  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#7
  def initialize(secret, initialization_vector, options); end

  # Returns the value of attribute enabled.
  #
  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#3
  def enabled; end

  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#21
  def encrypt(payload); end

  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#17
  def encrypted_javascript(payload); end

  # Returns the value of attribute initialization_vector.
  #
  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#3
  def initialization_vector; end

  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#13
  def plaintext_part(settings); end

  # Returns the value of attribute secret.
  #
  # source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#3
  def secret; end
end

# source://intercom-rails//lib/intercom-rails/encrypted_mode.rb#5
IntercomRails::EncryptedMode::ENCRYPTED_MODE_SETTINGS_WHITELIST = T.let(T.unsafe(nil), Array)

# source://intercom-rails//lib/intercom-rails/exceptions.rb#3
class IntercomRails::Error < ::StandardError; end

# source://intercom-rails//lib/intercom-rails/exceptions.rb#5
class IntercomRails::ExcludedUserFoundError < ::IntercomRails::Error; end

# source://intercom-rails//lib/intercom-rails/exceptions.rb#6
class IntercomRails::NoCompanyFoundError < ::IntercomRails::Error; end

# source://intercom-rails//lib/intercom-rails/exceptions.rb#4
class IntercomRails::NoUserFoundError < ::IntercomRails::Error; end

# source://intercom-rails//lib/intercom-rails/proxy.rb#3
module IntercomRails::Proxy; end

# source://intercom-rails//lib/intercom-rails/proxy/company.rb#5
class IntercomRails::Proxy::Company < ::IntercomRails::Proxy::Proxy
  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#5
  def company; end

  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#9
  def created_at; end

  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#7
  def id; end

  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#12
  def monthly_spend; end

  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#8
  def name; end

  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#11
  def plan; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/proxy/company.rb#26
  def valid?; end

  class << self
    # @raise [NoCompanyFoundError]
    #
    # source://intercom-rails//lib/intercom-rails/proxy/company.rb#14
    def current_in_context(search_object); end
  end
end

# source://intercom-rails//lib/intercom-rails/proxy.rb#5
class IntercomRails::Proxy::Proxy
  # @return [Proxy] a new instance of Proxy
  #
  # source://intercom-rails//lib/intercom-rails/proxy.rb#19
  def initialize(object_to_proxy, search_object = T.unsafe(nil)); end

  # source://intercom-rails//lib/intercom-rails/proxy.rb#48
  def custom_data; end

  # Returns the value of attribute proxied_object.
  #
  # source://intercom-rails//lib/intercom-rails/proxy.rb#17
  def proxied_object; end

  # Returns the value of attribute search_object.
  #
  # source://intercom-rails//lib/intercom-rails/proxy.rb#17
  def search_object; end

  # source://intercom-rails//lib/intercom-rails/proxy.rb#34
  def standard_data; end

  # source://intercom-rails//lib/intercom-rails/proxy.rb#24
  def to_hash; end

  protected

  # source://intercom-rails//lib/intercom-rails/proxy.rb#66
  def config(type_override = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/proxy.rb#70
  def config_variable_set?(variable_name); end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/proxy.rb#74
  def identity_present?; end

  # source://intercom-rails//lib/intercom-rails/proxy.rb#58
  def type; end

  private

  # source://intercom-rails//lib/intercom-rails/proxy.rb#130
  def custom_data_from_config; end

  # source://intercom-rails//lib/intercom-rails/proxy.rb#124
  def custom_data_from_request; end

  # source://intercom-rails//lib/intercom-rails/proxy.rb#135
  def custom_data_value(proc_or_symbol_or_hash); end

  class << self
    # source://intercom-rails//lib/intercom-rails/proxy.rb#7
    def class_string; end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#62
    def config(type_override = T.unsafe(nil)); end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#94
    def config_delegator(attribute_name); end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#110
    def identity_attributes; end

    # @private
    #
    # source://intercom-rails//lib/intercom-rails/proxy.rb#11
    def inherited(subclass); end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#78
    def proxy_delegator(attribute_name, options = T.unsafe(nil)); end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#118
    def standard_data_config_attributes; end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#114
    def standard_data_proxy_attributes; end

    # source://intercom-rails//lib/intercom-rails/proxy.rb#54
    def type; end
  end
end

# source://intercom-rails//lib/intercom-rails/proxy/user.rb#5
class IntercomRails::Proxy::User < ::IntercomRails::Proxy::Proxy
  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#10
  def created_at; end

  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#8
  def email; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#54
  def excluded?; end

  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#7
  def id; end

  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#9
  def name; end

  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#42
  def standard_data; end

  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#5
  def user; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/proxy/user.rb#48
  def valid?; end

  class << self
    # @raise [NoUserFoundError]
    #
    # source://intercom-rails//lib/intercom-rails/proxy/user.rb#29
    def current_in_context(search_object); end

    # source://intercom-rails//lib/intercom-rails/proxy/user.rb#17
    def potential_user_objects; end
  end
end

# source://intercom-rails//lib/intercom-rails/proxy/user.rb#12
IntercomRails::Proxy::User::PREDEFINED_POTENTIAL_USER_OBJECTS = T.let(T.unsafe(nil), Array)

# source://intercom-rails//lib/intercom-rails/railtie.rb#2
class IntercomRails::Railtie < ::Rails::Railtie; end

# source://intercom-rails//lib/intercom-rails/script_tag_helper.rb#2
IntercomRails::SCRIPT_TAG_HELPER_CALLED_INSTANCE_VARIABLE = T.let(T.unsafe(nil), Symbol)

# source://intercom-rails//lib/intercom-rails/script_tag.rb#9
class IntercomRails::ScriptTag
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  # @return [ScriptTag] a new instance of ScriptTag
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#23
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute company_details.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#20
  def company_details; end

  # Returns the value of attribute controller.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def controller; end

  # Sets the attribute controller
  #
  # @param value the value to set the attribute controller to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def controller=(_arg0); end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#92
  def csp_sha256; end

  # Returns the value of attribute encrypted_mode.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def encrypted_mode; end

  # Sets the attribute encrypted_mode
  #
  # @param value the value to set the attribute encrypted_mode to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def encrypted_mode=(_arg0); end

  # Returns the value of attribute encrypted_mode_enabled.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def encrypted_mode_enabled; end

  # Sets the attribute encrypted_mode_enabled
  #
  # @param value the value to set the attribute encrypted_mode_enabled to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def encrypted_mode_enabled=(_arg0); end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#112
  def encrypted_settings; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#98
  def find_lead_attributes; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#75
  def intercom_settings; end

  # Returns the value of attribute jwt_enabled.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def jwt_enabled; end

  # Sets the attribute jwt_enabled
  #
  # @param value the value to set the attribute jwt_enabled to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def jwt_enabled=(_arg0); end

  # Returns the value of attribute jwt_expiry.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def jwt_expiry; end

  # Sets the attribute jwt_expiry
  #
  # @param value the value to set the attribute jwt_expiry to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def jwt_expiry=(_arg0); end

  # Returns the value of attribute nonce.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def nonce; end

  # Sets the attribute nonce
  #
  # @param value the value to set the attribute nonce to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def nonce=(_arg0); end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#108
  def plaintext_settings; end

  # Returns the value of attribute secret.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def secret; end

  # Sets the attribute secret
  #
  # @param value the value to set the attribute secret to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def secret=(_arg0); end

  # Returns the value of attribute session_duration.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#20
  def session_duration; end

  # Returns the value of attribute show_everywhere.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#20
  def show_everywhere; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#86
  def to_s; end

  # Returns the value of attribute user_details.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#20
  def user_details; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#53
  def valid?; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#66
  def valid_nonce?; end

  # Returns the value of attribute widget_options.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def widget_options; end

  # Sets the attribute widget_options
  #
  # @param value the value to set the attribute widget_options to.
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#21
  def widget_options=(_arg0); end

  private

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#206
  def app_id; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#177
  def company_details=(company_details); end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#184
  def find_current_company_details; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#166
  def find_current_user_details; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#125
  def generate_jwt; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#118
  def intercom_javascript; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#195
  def session_duration_from_config; end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#144
  def user_details=(user_details); end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#191
  def user_hash; end

  # @return [Boolean]
  #
  # source://intercom-rails//lib/intercom-rails/script_tag.rb#202
  def valid_session_duration?(session_duration); end

  # source://intercom-rails//lib/intercom-rails/script_tag.rb#213
  def widget_options_from_config; end
end

# Base64 regexp:
# - blocks of 4 [A-Za-z0-9+/]
# followed either by:
# - blocks of 2 [A-Za-z0-9+/] + '=='
# - blocks of 3 [A-Za-z0-9+/] + '='
#
# source://intercom-rails//lib/intercom-rails/script_tag.rb#15
IntercomRails::ScriptTag::NONCE_RE = T.let(T.unsafe(nil), Regexp)

# source://intercom-rails//lib/intercom-rails/script_tag_helper.rb#4
module IntercomRails::ScriptTagHelper
  # Generate an intercom script tag.
  #
  # @example basic example
  #   <%= intercom_script_tag({ :app_id => "your-app-id",
  #   :user_id => current_user.id,
  #   :email => current_user.email,
  #   :custom_data => { :plan => current_user.plan.name },
  #   :name => current_user.name }) %>
  # @example with widget activator for launching then widget when an element matching the css selector '#Intercom' is clicked.
  #   <%= intercom_script_tag({ :app_id => "your-app-id",
  #   :user_id => current_user.id,
  #   :email => current_user.email,
  #   :custom_data => { :plan => current_user.plan.name },
  #   :name => current_user.name },
  #   {:widget => {:activator => "#Intercom"}},) %>
  # @option user_details
  # @option user_details
  # @option user_details
  # @option options
  # @option options
  # @option options
  # @option user_details
  # @option user_details
  # @param user_details [Hash] a customizable hash of user details
  # @param options [Hash] an optional hash for Identity Verification and widget customization
  # @return [String] Intercom script tag
  #
  # source://intercom-rails//lib/intercom-rails/script_tag_helper.rb#31
  def intercom_script_tag(user_details = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://intercom-rails//lib/intercom-rails/shutdown_helper.rb#2
module IntercomRails::ShutdownHelper
  class << self
    # source://intercom-rails//lib/intercom-rails/shutdown_helper.rb#24
    def intercom_shutdown(session, cookies, domain = T.unsafe(nil)); end

    # This helper allows to erase cookies when a user log out of an application
    # It is recommanded to call this function every time a user log out of your application
    # Do not use before a redirect_to because it will not clear the cookies on a redirection
    #
    # source://intercom-rails//lib/intercom-rails/shutdown_helper.rb#6
    def intercom_shutdown_helper(cookies, domain = T.unsafe(nil)); end

    # source://intercom-rails//lib/intercom-rails/shutdown_helper.rb#20
    def prepare_intercom_shutdown(session); end
  end
end
