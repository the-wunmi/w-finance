# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lucide-rails` gem.
# Please instead update this file by running `bin/tapioca gem lucide-rails`.


# source://lucide-rails//lib/lucide-rails/version.rb#3
module LucideRails
  private

  # Internal: Returns the overriden default options, or the builtin one in case
  # no override occurred.
  #
  # source://lucide-rails//lib/lucide-rails.rb#57
  def default_options; end

  # Public: Overrides default options for every svg generated by the library.
  # See LucideRails::DEFAULT_OPTIONS for reference.
  #
  # source://lucide-rails//lib/lucide-rails.rb#51
  def default_options=(value); end

  # Internal: Returns either the set provider, falling back to the default one.
  #
  # source://lucide-rails//lib/lucide-rails.rb#45
  def provider; end

  # Public: Defines the default provider for icons. The library can either load
  # icons from the filesystem as required, or use a memory cache for all icons,
  # avoiding filesystem accesses for each required icon on the cost of a
  # slightly extra memory usage.
  #
  # type - Type of provider to use. Accepts either :memory (default), or
  #        :filesystem
  #
  # Returns nothing.
  #
  # source://lucide-rails//lib/lucide-rails.rb#36
  def provider=(type); end

  class << self
    # Internal: Returns the overriden default options, or the builtin one in case
    # no override occurred.
    #
    # source://lucide-rails//lib/lucide-rails.rb#57
    def default_options; end

    # Public: Overrides default options for every svg generated by the library.
    # See LucideRails::DEFAULT_OPTIONS for reference.
    #
    # source://lucide-rails//lib/lucide-rails.rb#51
    def default_options=(value); end

    # Internal: Returns either the set provider, falling back to the default one.
    #
    # source://lucide-rails//lib/lucide-rails.rb#45
    def provider; end

    # Public: Defines the default provider for icons. The library can either load
    # icons from the filesystem as required, or use a memory cache for all icons,
    # avoiding filesystem accesses for each required icon on the cost of a
    # slightly extra memory usage.
    #
    # type - Type of provider to use. Accepts either :memory (default), or
    #        :filesystem
    #
    # Returns nothing.
    #
    # source://lucide-rails//lib/lucide-rails.rb#36
    def provider=(type); end
  end
end

# Extracted from options contained in svg tags from original/*.svg
#
# source://lucide-rails//lib/lucide-rails.rb#13
LucideRails::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://lucide-rails//lib/lucide-rails.rb#61
LucideRails::GEM_ROOT = T.let(T.unsafe(nil), Pathname)

# source://lucide-rails//lib/lucide-rails/icon_provider.rb#4
module LucideRails::IconProvider
  private

  # source://lucide-rails//lib/lucide-rails/icon_provider.rb#7
  def icon(named); end

  # source://lucide-rails//lib/lucide-rails/icon_provider.rb#25
  def memory; end

  # source://lucide-rails//lib/lucide-rails/icon_provider.rb#11
  def provide_from_filesystem(named); end

  # source://lucide-rails//lib/lucide-rails/icon_provider.rb#18
  def provide_from_memory(named); end

  class << self
    # source://lucide-rails//lib/lucide-rails/icon_provider.rb#7
    def icon(named); end

    # source://lucide-rails//lib/lucide-rails/icon_provider.rb#25
    def memory; end

    # @raise [ArgumentError]
    #
    # source://lucide-rails//lib/lucide-rails/icon_provider.rb#11
    def provide_from_filesystem(named); end

    # @raise [ArgumentError]
    #
    # source://lucide-rails//lib/lucide-rails/icon_provider.rb#18
    def provide_from_memory(named); end
  end
end

# source://lucide-rails//lib/lucide-rails/rails_helper.rb#4
module LucideRails::RailsHelper
  # source://lucide-rails//lib/lucide-rails/rails_helper.rb#5
  def lucide_icon(named, **options); end
end

# source://lucide-rails//lib/lucide-rails/railtie.rb#4
class LucideRails::Railtie < ::Rails::Railtie; end

# source://lucide-rails//lib/lucide-rails/version.rb#4
LucideRails::VERSION = T.let(T.unsafe(nil), String)
